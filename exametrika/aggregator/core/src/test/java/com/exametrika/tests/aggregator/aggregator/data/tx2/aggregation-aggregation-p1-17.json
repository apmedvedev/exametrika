{
    "period 0": 
    {
        "<root>": 
        {
            "id": "4@aggregation-aggregation-p1-17/data-17.dt[0]",
            "scope": "",
            "metric": "",
            "nodes": 
            [
                {
                    "id": "22@aggregation-aggregation-p1-17/data-17.dt[0]",
                    "scope": "a.b.primary",
                    "metric": "",
                    "componentType": "txPrimary",
                    "measurements": 
                    [
                        {
                            "metricType1": 
                            {
                                "inherent": 
                                {
                                    "std.count": 10,
                                    "std.sum": 40,
                                    "std.min": 1,
                                    "std.max": 20,
                                    "std.avg": 4,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                },
                                "total": 
                                {
                                    "std.count": 10,
                                    "std.sum": 1000,
                                    "std.min": 20,
                                    "std.max": 30,
                                    "std.avg": 100,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                }
                            },
                            "metricType2": "error"
                        },
                        {
                            "metricType1": 
                            {
                                "inherent": 
                                {
                                    "std.count": 10,
                                    "std.sum": 40,
                                    "std.min": 1,
                                    "std.max": 20,
                                    "std.avg": 4,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                },
                                "total": 
                                {
                                    "std.count": 10,
                                    "std.sum": 1000,
                                    "std.min": 20,
                                    "std.max": 30,
                                    "std.avg": 100,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                }
                            },
                            "metricType2": "error"
                        },
                        {
                            "metricType1": 
                            {
                                "inherent": 
                                {
                                    "std.count": 10,
                                    "std.sum": 40,
                                    "std.min": 1,
                                    "std.max": 20,
                                    "std.avg": 4,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                },
                                "total": 
                                {
                                    "std.count": 10,
                                    "std.sum": 1000,
                                    "std.min": 20,
                                    "std.max": 30,
                                    "std.avg": 100,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                }
                            },
                            "metricType2": "error"
                        },
                        {
                            "metricType1": 
                            {
                                "inherent": 
                                {
                                    "std.count": 10,
                                    "std.sum": 40,
                                    "std.min": 1,
                                    "std.max": 20,
                                    "std.avg": 4,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                },
                                "total": 
                                {
                                    "std.count": 10,
                                    "std.sum": 1000,
                                    "std.min": 20,
                                    "std.max": 30,
                                    "std.avg": 100,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                }
                            },
                            "metricType2": "error"
                        }
                    ],
                    "metadata": 
                    {
                        "key": "value-1.1"
                    },
                    "children": 
                    [
                        {
                            "id": "42@aggregation-aggregation-p1-17/data-17.dt[0]",
                            "scope": "a.b.primary",
                            "metric": "metric1",
                            "componentType": "txStack",
                            "measurements": 
                            [
                                {
                                    "metricType1": 
                                    {
                                        "inherent": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 50,
                                            "std.min": 1,
                                            "std.max": 30,
                                            "std.avg": 2.5,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        },
                                        "total": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 500,
                                            "std.min": 10,
                                            "std.max": 20,
                                            "std.avg": 25,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        }
                                    },
                                    "metricType2": "error"
                                },
                                {
                                    "metricType1": 
                                    {
                                        "inherent": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 50,
                                            "std.min": 1,
                                            "std.max": 30,
                                            "std.avg": 2.5,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        },
                                        "total": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 500,
                                            "std.min": 10,
                                            "std.max": 20,
                                            "std.avg": 25,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        }
                                    },
                                    "metricType2": "error"
                                },
                                {
                                    "metricType1": 
                                    {
                                        "inherent": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 50,
                                            "std.min": 1,
                                            "std.max": 30,
                                            "std.avg": 2.5,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        },
                                        "total": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 500,
                                            "std.min": 10,
                                            "std.max": 20,
                                            "std.avg": 25,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        }
                                    },
                                    "metricType2": "error"
                                },
                                {
                                    "metricType1": 
                                    {
                                        "inherent": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 50,
                                            "std.min": 1,
                                            "std.max": 30,
                                            "std.avg": 2.5,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        },
                                        "total": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 500,
                                            "std.min": 10,
                                            "std.max": 20,
                                            "std.avg": 25,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        }
                                    },
                                    "metricType2": "error"
                                }
                            ],
                            "metadata": 
                            {
                                "key": "value-1.2",
                                "parent": "txPrimary",
                                "entry": "txPrimary"
                            },
                            "children": 
                            [
                                {
                                    "id": "54@aggregation-aggregation-p1-17/data-17.dt[0]",
                                    "scope": "a.b.primary",
                                    "metric": "metric1⟶metric2",
                                    "componentType": "txStack",
                                    "measurements": 
                                    [
                                        {
                                            "metricType1": 
                                            {
                                                "inherent": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 60,
                                                    "std.min": 2,
                                                    "std.max": 40,
                                                    "std.avg": 2,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                },
                                                "total": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 250,
                                                    "std.min": 5,
                                                    "std.max": 25,
                                                    "std.avg": 8.333,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                }
                                            },
                                            "metricType2": "error"
                                        },
                                        {
                                            "metricType1": 
                                            {
                                                "inherent": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 60,
                                                    "std.min": 2,
                                                    "std.max": 40,
                                                    "std.avg": 2,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                },
                                                "total": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 250,
                                                    "std.min": 5,
                                                    "std.max": 25,
                                                    "std.avg": 8.333,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                }
                                            },
                                            "metricType2": "error"
                                        },
                                        {
                                            "metricType1": 
                                            {
                                                "inherent": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 60,
                                                    "std.min": 2,
                                                    "std.max": 40,
                                                    "std.avg": 2,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                },
                                                "total": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 250,
                                                    "std.min": 5,
                                                    "std.max": 25,
                                                    "std.avg": 8.333,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                }
                                            },
                                            "metricType2": "error"
                                        },
                                        {
                                            "metricType1": 
                                            {
                                                "inherent": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 60,
                                                    "std.min": 2,
                                                    "std.max": 40,
                                                    "std.avg": 2,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                },
                                                "total": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 250,
                                                    "std.min": 5,
                                                    "std.max": 25,
                                                    "std.avg": 8.333,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                }
                                            },
                                            "metricType2": "error"
                                        }
                                    ],
                                    "metadata": 
                                    {
                                        "key": "value-1.3",
                                        "parent": "txStack",
                                        "entry": "txPrimary"
                                    },
                                    "children": 
                                    [
                                        {
                                            "id": "66@aggregation-aggregation-p1-17/data-17.dt[0]",
                                            "scope": "a.b.primary",
                                            "metric": "metric1⟶metric2⟶exit",
                                            "componentType": "txExit",
                                            "measurements": 
                                            [
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                }
                                            ],
                                            "metadata": 
                                            {
                                                "key": "value-1.4",
                                                "parent": "txStack",
                                                "entry": "txPrimary"
                                            }
                                        },
                                        {
                                            "id": "78@aggregation-aggregation-p1-17/data-17.dt[0]",
                                            "scope": "a.b.primary",
                                            "metric": "metric1⟶metric2⟶syncExit",
                                            "componentType": "txIntermediateExit",
                                            "flags": "[leaf, sync]",
                                            "measurements": 
                                            [
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                }
                                            ],
                                            "metadata": 
                                            {
                                                "key": "value-1.4",
                                                "parent": "txStack",
                                                "entry": "txPrimary",
                                                "stackId": "7bdcd730-d38c-4ac3-8993-65ed771708a4",
                                                "type": "sync"
                                            },
                                            "childEntryPoint": 
                                            {
                                                "id": "126@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                "scope": "a.c.test-7bdcd730-d38c-4ac3-8993-65ed771708a4",
                                                "metric": "",
                                                "componentType": "txSecondary",
                                                "flags": "[sync]",
                                                "measurements": 
                                                [
                                                    {
                                                        "metricType1": 
                                                        {
                                                            "inherent": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 40,
                                                                "std.min": 1,
                                                                "std.max": 20,
                                                                "std.avg": 4,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            },
                                                            "total": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 1000,
                                                                "std.min": 20,
                                                                "std.max": 30,
                                                                "std.avg": 100,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            }
                                                        },
                                                        "metricType2": "error"
                                                    },
                                                    {
                                                        "metricType1": 
                                                        {
                                                            "inherent": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 40,
                                                                "std.min": 1,
                                                                "std.max": 20,
                                                                "std.avg": 4,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            },
                                                            "total": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 1000,
                                                                "std.min": 20,
                                                                "std.max": 30,
                                                                "std.avg": 100,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            }
                                                        },
                                                        "metricType2": "error"
                                                    },
                                                    {
                                                        "metricType1": 
                                                        {
                                                            "inherent": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 40,
                                                                "std.min": 1,
                                                                "std.max": 20,
                                                                "std.avg": 4,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            },
                                                            "total": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 1000,
                                                                "std.min": 20,
                                                                "std.max": 30,
                                                                "std.avg": 100,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            }
                                                        },
                                                        "metricType2": "error"
                                                    },
                                                    {
                                                        "metricType1": 
                                                        {
                                                            "inherent": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 40,
                                                                "std.min": 1,
                                                                "std.max": 20,
                                                                "std.avg": 4,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            },
                                                            "total": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 1000,
                                                                "std.min": 20,
                                                                "std.max": 30,
                                                                "std.avg": 100,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            }
                                                        },
                                                        "metricType2": "error"
                                                    }
                                                ],
                                                "metadata": 
                                                {
                                                    "key": "value-1.1"
                                                },
                                                "children": 
                                                [
                                                    {
                                                        "id": "146@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                        "scope": "a.c.test-7bdcd730-d38c-4ac3-8993-65ed771708a4",
                                                        "metric": "metric1",
                                                        "componentType": "txStack",
                                                        "measurements": 
                                                        [
                                                            {
                                                                "metricType1": 
                                                                {
                                                                    "inherent": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 50,
                                                                        "std.min": 1,
                                                                        "std.max": 30,
                                                                        "std.avg": 2.5,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    },
                                                                    "total": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 500,
                                                                        "std.min": 10,
                                                                        "std.max": 20,
                                                                        "std.avg": 25,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    }
                                                                },
                                                                "metricType2": "error"
                                                            },
                                                            {
                                                                "metricType1": 
                                                                {
                                                                    "inherent": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 50,
                                                                        "std.min": 1,
                                                                        "std.max": 30,
                                                                        "std.avg": 2.5,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    },
                                                                    "total": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 500,
                                                                        "std.min": 10,
                                                                        "std.max": 20,
                                                                        "std.avg": 25,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    }
                                                                },
                                                                "metricType2": "error"
                                                            },
                                                            {
                                                                "metricType1": 
                                                                {
                                                                    "inherent": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 50,
                                                                        "std.min": 1,
                                                                        "std.max": 30,
                                                                        "std.avg": 2.5,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    },
                                                                    "total": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 500,
                                                                        "std.min": 10,
                                                                        "std.max": 20,
                                                                        "std.avg": 25,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    }
                                                                },
                                                                "metricType2": "error"
                                                            },
                                                            {
                                                                "metricType1": 
                                                                {
                                                                    "inherent": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 50,
                                                                        "std.min": 1,
                                                                        "std.max": 30,
                                                                        "std.avg": 2.5,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    },
                                                                    "total": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 500,
                                                                        "std.min": 10,
                                                                        "std.max": 20,
                                                                        "std.avg": 25,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    }
                                                                },
                                                                "metricType2": "error"
                                                            }
                                                        ],
                                                        "metadata": 
                                                        {
                                                            "key": "value-1.2",
                                                            "parent": "txSecondary",
                                                            "entry": "txSecondary"
                                                        },
                                                        "children": 
                                                        [
                                                            {
                                                                "id": "158@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                "scope": "a.c.test-7bdcd730-d38c-4ac3-8993-65ed771708a4",
                                                                "metric": "metric1⟶metric2",
                                                                "componentType": "txStack",
                                                                "measurements": 
                                                                [
                                                                    {
                                                                        "metricType1": 
                                                                        {
                                                                            "inherent": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 60,
                                                                                "std.min": 2,
                                                                                "std.max": 40,
                                                                                "std.avg": 2,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            },
                                                                            "total": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 250,
                                                                                "std.min": 5,
                                                                                "std.max": 25,
                                                                                "std.avg": 8.333,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            }
                                                                        },
                                                                        "metricType2": "error"
                                                                    },
                                                                    {
                                                                        "metricType1": 
                                                                        {
                                                                            "inherent": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 60,
                                                                                "std.min": 2,
                                                                                "std.max": 40,
                                                                                "std.avg": 2,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            },
                                                                            "total": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 250,
                                                                                "std.min": 5,
                                                                                "std.max": 25,
                                                                                "std.avg": 8.333,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            }
                                                                        },
                                                                        "metricType2": "error"
                                                                    },
                                                                    {
                                                                        "metricType1": 
                                                                        {
                                                                            "inherent": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 60,
                                                                                "std.min": 2,
                                                                                "std.max": 40,
                                                                                "std.avg": 2,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            },
                                                                            "total": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 250,
                                                                                "std.min": 5,
                                                                                "std.max": 25,
                                                                                "std.avg": 8.333,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            }
                                                                        },
                                                                        "metricType2": "error"
                                                                    },
                                                                    {
                                                                        "metricType1": 
                                                                        {
                                                                            "inherent": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 60,
                                                                                "std.min": 2,
                                                                                "std.max": 40,
                                                                                "std.avg": 2,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            },
                                                                            "total": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 250,
                                                                                "std.min": 5,
                                                                                "std.max": 25,
                                                                                "std.avg": 8.333,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            }
                                                                        },
                                                                        "metricType2": "error"
                                                                    }
                                                                ],
                                                                "metadata": 
                                                                {
                                                                    "key": "value-1.3",
                                                                    "parent": "txStack",
                                                                    "entry": "txSecondary"
                                                                },
                                                                "children": 
                                                                [
                                                                    {
                                                                        "id": "170@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                        "scope": "a.c.test-7bdcd730-d38c-4ac3-8993-65ed771708a4",
                                                                        "metric": "metric1⟶metric2⟶exit",
                                                                        "componentType": "txExit",
                                                                        "measurements": 
                                                                        [
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            }
                                                                        ],
                                                                        "metadata": 
                                                                        {
                                                                            "key": "value-1.4",
                                                                            "parent": "txStack",
                                                                            "entry": "txSecondary"
                                                                        }
                                                                    },
                                                                    {
                                                                        "id": "182@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                        "scope": "a.c.test-7bdcd730-d38c-4ac3-8993-65ed771708a4",
                                                                        "metric": "metric1⟶metric2⟶metric1",
                                                                        "componentType": "txStack",
                                                                        "measurements": 
                                                                        [
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            }
                                                                        ],
                                                                        "metadata": 
                                                                        {
                                                                            "key": "value-1.5",
                                                                            "parent": "txStack",
                                                                            "entry": "txSecondary"
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "logs": 
                                                [
                                                    {
                                                        "id": "194@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                        "scope": "a.c.test-7bdcd730-d38c-4ac3-8993-65ed771708a4",
                                                        "metric": "",
                                                        "componentType": "txSecondaryLog",
                                                        "measurements": 
                                                        [
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 2,
                                                                    "value": "testLog4"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 3,
                                                                    "value": "testLog5"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 4,
                                                                    "value": "testLog6"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 2,
                                                                    "value": "testLog4"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 3,
                                                                    "value": "testLog5"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 4,
                                                                    "value": "testLog6"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 2,
                                                                    "value": "testLog4"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 3,
                                                                    "value": "testLog5"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 4,
                                                                    "value": "testLog6"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 2,
                                                                    "value": "testLog4"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 3,
                                                                    "value": "testLog5"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 4,
                                                                    "value": "testLog6"
                                                                }
                                                            }
                                                        ],
                                                        "metadata": 
                                                        {
                                                            "key": "value-1.6",
                                                            "entry": "txSecondary"
                                                        }
                                                    },
                                                    {
                                                        "id": "200@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                        "scope": "a.c.test-7bdcd730-d38c-4ac3-8993-65ed771708a4",
                                                        "metric": "",
                                                        "componentType": "txSecondaryError",
                                                        "measurements": 
                                                        [
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "exception": 
                                                                    {
                                                                        "class": "TestException2",
                                                                        "stackTrace": 
                                                                        [
                                                                            {
                                                                                "class": "class21",
                                                                                "method": "method21"
                                                                            },
                                                                            {
                                                                                "class": "class22",
                                                                                "method": "method22"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "stackTrace": 
                                                                    [
                                                                        {
                                                                            "class": "testClass21",
                                                                            "method": "testMethod21"
                                                                        },
                                                                        {
                                                                            "class": "testClass22",
                                                                            "method": "testMethod22"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 3,
                                                                    "stackTrace": 
                                                                    [
                                                                        {
                                                                            "class": "testClass23",
                                                                            "method": "testMethod23"
                                                                        },
                                                                        {
                                                                            "class": "testClass23",
                                                                            "method": "testMethod23"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "exception": 
                                                                    {
                                                                        "class": "TestException2",
                                                                        "stackTrace": 
                                                                        [
                                                                            {
                                                                                "class": "class21",
                                                                                "method": "method21"
                                                                            },
                                                                            {
                                                                                "class": "class22",
                                                                                "method": "method22"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "stackTrace": 
                                                                    [
                                                                        {
                                                                            "class": "testClass21",
                                                                            "method": "testMethod21"
                                                                        },
                                                                        {
                                                                            "class": "testClass22",
                                                                            "method": "testMethod22"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 3,
                                                                    "stackTrace": 
                                                                    [
                                                                        {
                                                                            "class": "testClass23",
                                                                            "method": "testMethod23"
                                                                        },
                                                                        {
                                                                            "class": "testClass23",
                                                                            "method": "testMethod23"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "exception": 
                                                                    {
                                                                        "class": "TestException2",
                                                                        "stackTrace": 
                                                                        [
                                                                            {
                                                                                "class": "class21",
                                                                                "method": "method21"
                                                                            },
                                                                            {
                                                                                "class": "class22",
                                                                                "method": "method22"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "stackTrace": 
                                                                    [
                                                                        {
                                                                            "class": "testClass21",
                                                                            "method": "testMethod21"
                                                                        },
                                                                        {
                                                                            "class": "testClass22",
                                                                            "method": "testMethod22"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 3,
                                                                    "stackTrace": 
                                                                    [
                                                                        {
                                                                            "class": "testClass23",
                                                                            "method": "testMethod23"
                                                                        },
                                                                        {
                                                                            "class": "testClass23",
                                                                            "method": "testMethod23"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "exception": 
                                                                    {
                                                                        "class": "TestException2",
                                                                        "stackTrace": 
                                                                        [
                                                                            {
                                                                                "class": "class21",
                                                                                "method": "method21"
                                                                            },
                                                                            {
                                                                                "class": "class22",
                                                                                "method": "method22"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "stackTrace": 
                                                                    [
                                                                        {
                                                                            "class": "testClass21",
                                                                            "method": "testMethod21"
                                                                        },
                                                                        {
                                                                            "class": "testClass22",
                                                                            "method": "testMethod22"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 3,
                                                                    "stackTrace": 
                                                                    [
                                                                        {
                                                                            "class": "testClass23",
                                                                            "method": "testMethod23"
                                                                        },
                                                                        {
                                                                            "class": "testClass23",
                                                                            "method": "testMethod23"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ],
                                                        "metadata": 
                                                        {
                                                            "key": "value-1.7",
                                                            "entry": "txSecondary"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": "90@aggregation-aggregation-p1-17/data-17.dt[0]",
                                            "scope": "a.b.primary",
                                            "metric": "metric1⟶metric2⟶asyncExit",
                                            "componentType": "txIntermediateExit",
                                            "flags": "[leaf]",
                                            "measurements": 
                                            [
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                }
                                            ],
                                            "metadata": 
                                            {
                                                "key": "value-1.4",
                                                "parent": "txStack",
                                                "entry": "txPrimary",
                                                "stackId": "853f7d7b-01cd-44bc-bda0-dc4c15a82bd3",
                                                "type": "async"
                                            },
                                            "childEntryPoint": 
                                            {
                                                "id": "206@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                "scope": "a.c.test-853f7d7b-01cd-44bc-bda0-dc4c15a82bd3",
                                                "metric": "",
                                                "componentType": "txSecondary",
                                                "measurements": 
                                                [
                                                    {
                                                        "metricType1": 
                                                        {
                                                            "inherent": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 40,
                                                                "std.min": 1,
                                                                "std.max": 20,
                                                                "std.avg": 4,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            },
                                                            "total": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 1000,
                                                                "std.min": 20,
                                                                "std.max": 30,
                                                                "std.avg": 100,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            }
                                                        },
                                                        "metricType2": "error"
                                                    },
                                                    {
                                                        "metricType1": 
                                                        {
                                                            "inherent": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 40,
                                                                "std.min": 1,
                                                                "std.max": 20,
                                                                "std.avg": 4,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            },
                                                            "total": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 1000,
                                                                "std.min": 20,
                                                                "std.max": 30,
                                                                "std.avg": 100,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            }
                                                        },
                                                        "metricType2": "error"
                                                    },
                                                    {
                                                        "metricType1": 
                                                        {
                                                            "inherent": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 40,
                                                                "std.min": 1,
                                                                "std.max": 20,
                                                                "std.avg": 4,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            },
                                                            "total": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 1000,
                                                                "std.min": 20,
                                                                "std.max": 30,
                                                                "std.avg": 100,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            }
                                                        },
                                                        "metricType2": "error"
                                                    },
                                                    {
                                                        "metricType1": 
                                                        {
                                                            "inherent": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 40,
                                                                "std.min": 1,
                                                                "std.max": 20,
                                                                "std.avg": 4,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            },
                                                            "total": 
                                                            {
                                                                "std.count": 10,
                                                                "std.sum": 1000,
                                                                "std.min": 20,
                                                                "std.max": 30,
                                                                "std.avg": 100,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true
                                                            }
                                                        },
                                                        "metricType2": "error"
                                                    }
                                                ],
                                                "metadata": 
                                                {
                                                    "key": "value-1.1"
                                                },
                                                "children": 
                                                [
                                                    {
                                                        "id": "226@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                        "scope": "a.c.test-853f7d7b-01cd-44bc-bda0-dc4c15a82bd3",
                                                        "metric": "metric1",
                                                        "componentType": "txStack",
                                                        "measurements": 
                                                        [
                                                            {
                                                                "metricType1": 
                                                                {
                                                                    "inherent": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 50,
                                                                        "std.min": 1,
                                                                        "std.max": 30,
                                                                        "std.avg": 2.5,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    },
                                                                    "total": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 500,
                                                                        "std.min": 10,
                                                                        "std.max": 20,
                                                                        "std.avg": 25,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    }
                                                                },
                                                                "metricType2": "error"
                                                            },
                                                            {
                                                                "metricType1": 
                                                                {
                                                                    "inherent": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 50,
                                                                        "std.min": 1,
                                                                        "std.max": 30,
                                                                        "std.avg": 2.5,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    },
                                                                    "total": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 500,
                                                                        "std.min": 10,
                                                                        "std.max": 20,
                                                                        "std.avg": 25,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    }
                                                                },
                                                                "metricType2": "error"
                                                            },
                                                            {
                                                                "metricType1": 
                                                                {
                                                                    "inherent": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 50,
                                                                        "std.min": 1,
                                                                        "std.max": 30,
                                                                        "std.avg": 2.5,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    },
                                                                    "total": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 500,
                                                                        "std.min": 10,
                                                                        "std.max": 20,
                                                                        "std.avg": 25,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    }
                                                                },
                                                                "metricType2": "error"
                                                            },
                                                            {
                                                                "metricType1": 
                                                                {
                                                                    "inherent": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 50,
                                                                        "std.min": 1,
                                                                        "std.max": 30,
                                                                        "std.avg": 2.5,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    },
                                                                    "total": 
                                                                    {
                                                                        "std.count": 20,
                                                                        "std.sum": 500,
                                                                        "std.min": 10,
                                                                        "std.max": 20,
                                                                        "std.avg": 25,
                                                                        "anomaly(std.avg).score": 0.5,
                                                                        "anomaly(std.avg).level": "error",
                                                                        "anomaly(std.avg).primary": true,
                                                                        "forecast(std.count).score": 0.5,
                                                                        "forecast(std.count).level": "error",
                                                                        "forecast(std.count).primary": true
                                                                    }
                                                                },
                                                                "metricType2": "error"
                                                            }
                                                        ],
                                                        "metadata": 
                                                        {
                                                            "key": "value-1.2",
                                                            "parent": "txSecondary",
                                                            "entry": "txSecondary"
                                                        },
                                                        "children": 
                                                        [
                                                            {
                                                                "id": "238@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                "scope": "a.c.test-853f7d7b-01cd-44bc-bda0-dc4c15a82bd3",
                                                                "metric": "metric1⟶metric2",
                                                                "componentType": "txStack",
                                                                "measurements": 
                                                                [
                                                                    {
                                                                        "metricType1": 
                                                                        {
                                                                            "inherent": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 60,
                                                                                "std.min": 2,
                                                                                "std.max": 40,
                                                                                "std.avg": 2,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            },
                                                                            "total": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 250,
                                                                                "std.min": 5,
                                                                                "std.max": 25,
                                                                                "std.avg": 8.333,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            }
                                                                        },
                                                                        "metricType2": "error"
                                                                    },
                                                                    {
                                                                        "metricType1": 
                                                                        {
                                                                            "inherent": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 60,
                                                                                "std.min": 2,
                                                                                "std.max": 40,
                                                                                "std.avg": 2,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            },
                                                                            "total": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 250,
                                                                                "std.min": 5,
                                                                                "std.max": 25,
                                                                                "std.avg": 8.333,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            }
                                                                        },
                                                                        "metricType2": "error"
                                                                    },
                                                                    {
                                                                        "metricType1": 
                                                                        {
                                                                            "inherent": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 60,
                                                                                "std.min": 2,
                                                                                "std.max": 40,
                                                                                "std.avg": 2,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            },
                                                                            "total": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 250,
                                                                                "std.min": 5,
                                                                                "std.max": 25,
                                                                                "std.avg": 8.333,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            }
                                                                        },
                                                                        "metricType2": "error"
                                                                    },
                                                                    {
                                                                        "metricType1": 
                                                                        {
                                                                            "inherent": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 60,
                                                                                "std.min": 2,
                                                                                "std.max": 40,
                                                                                "std.avg": 2,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            },
                                                                            "total": 
                                                                            {
                                                                                "std.count": 30,
                                                                                "std.sum": 250,
                                                                                "std.min": 5,
                                                                                "std.max": 25,
                                                                                "std.avg": 8.333,
                                                                                "anomaly(std.avg).score": 0.5,
                                                                                "anomaly(std.avg).level": "error",
                                                                                "anomaly(std.avg).primary": true,
                                                                                "forecast(std.count).score": 0.5,
                                                                                "forecast(std.count).level": "error",
                                                                                "forecast(std.count).primary": true
                                                                            }
                                                                        },
                                                                        "metricType2": "error"
                                                                    }
                                                                ],
                                                                "metadata": 
                                                                {
                                                                    "key": "value-1.3",
                                                                    "parent": "txStack",
                                                                    "entry": "txSecondary"
                                                                },
                                                                "children": 
                                                                [
                                                                    {
                                                                        "id": "250@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                        "scope": "a.c.test-853f7d7b-01cd-44bc-bda0-dc4c15a82bd3",
                                                                        "metric": "metric1⟶metric2⟶exit",
                                                                        "componentType": "txExit",
                                                                        "measurements": 
                                                                        [
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            }
                                                                        ],
                                                                        "metadata": 
                                                                        {
                                                                            "key": "value-1.4",
                                                                            "parent": "txStack",
                                                                            "entry": "txSecondary"
                                                                        }
                                                                    },
                                                                    {
                                                                        "id": "262@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                        "scope": "a.c.test-853f7d7b-01cd-44bc-bda0-dc4c15a82bd3",
                                                                        "metric": "metric1⟶metric2⟶metric1",
                                                                        "componentType": "txStack",
                                                                        "measurements": 
                                                                        [
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 100,
                                                                                        "std.sum": 200,
                                                                                        "std.min": 1,
                                                                                        "std.max": 20,
                                                                                        "std.avg": 2,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            }
                                                                        ],
                                                                        "metadata": 
                                                                        {
                                                                            "key": "value-1.5",
                                                                            "parent": "txStack",
                                                                            "entry": "txSecondary"
                                                                        }
                                                                    },
                                                                    {
                                                                        "id": "274@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                        "scope": "a.c.test-853f7d7b-01cd-44bc-bda0-dc4c15a82bd3",
                                                                        "metric": "metric1⟶metric2⟶syncExit",
                                                                        "componentType": "txIntermediateExit",
                                                                        "flags": "[leaf, sync]",
                                                                        "measurements": 
                                                                        [
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            },
                                                                            {
                                                                                "metricType1": 
                                                                                {
                                                                                    "inherent": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    },
                                                                                    "total": 
                                                                                    {
                                                                                        "std.count": 10,
                                                                                        "std.sum": 10,
                                                                                        "std.min": 1,
                                                                                        "std.max": 10,
                                                                                        "std.avg": 1,
                                                                                        "anomaly(std.avg).score": 0.5,
                                                                                        "anomaly(std.avg).level": "error",
                                                                                        "anomaly(std.avg).primary": true,
                                                                                        "forecast(std.count).score": 0.5,
                                                                                        "forecast(std.count).level": "error",
                                                                                        "forecast(std.count).primary": true
                                                                                    }
                                                                                },
                                                                                "metricType2": "error"
                                                                            }
                                                                        ],
                                                                        "metadata": 
                                                                        {
                                                                            "key": "value-1.4",
                                                                            "parent": "txStack",
                                                                            "entry": "txSecondary",
                                                                            "stackId": "b2ee6d0a-7848-4f98-800d-bf2e322431c5",
                                                                            "type": "sync"
                                                                        },
                                                                        "childEntryPoint": 
                                                                        {
                                                                            "id": "298@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                            "scope": "a.d.test-b2ee6d0a-7848-4f98-800d-bf2e322431c5",
                                                                            "metric": "",
                                                                            "componentType": "txSecondary",
                                                                            "flags": "[sync]",
                                                                            "measurements": 
                                                                            [
                                                                                {
                                                                                    "metricType1": 
                                                                                    {
                                                                                        "inherent": 
                                                                                        {
                                                                                            "std.count": 10,
                                                                                            "std.sum": 40,
                                                                                            "std.min": 1,
                                                                                            "std.max": 20,
                                                                                            "std.avg": 4,
                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                            "anomaly(std.avg).level": "error",
                                                                                            "anomaly(std.avg).primary": true,
                                                                                            "forecast(std.count).score": 0.5,
                                                                                            "forecast(std.count).level": "error",
                                                                                            "forecast(std.count).primary": true
                                                                                        },
                                                                                        "total": 
                                                                                        {
                                                                                            "std.count": 10,
                                                                                            "std.sum": 1000,
                                                                                            "std.min": 20,
                                                                                            "std.max": 30,
                                                                                            "std.avg": 100,
                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                            "anomaly(std.avg).level": "error",
                                                                                            "anomaly(std.avg).primary": true,
                                                                                            "forecast(std.count).score": 0.5,
                                                                                            "forecast(std.count).level": "error",
                                                                                            "forecast(std.count).primary": true
                                                                                        }
                                                                                    },
                                                                                    "metricType2": "error"
                                                                                },
                                                                                {
                                                                                    "metricType1": 
                                                                                    {
                                                                                        "inherent": 
                                                                                        {
                                                                                            "std.count": 10,
                                                                                            "std.sum": 40,
                                                                                            "std.min": 1,
                                                                                            "std.max": 20,
                                                                                            "std.avg": 4,
                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                            "anomaly(std.avg).level": "error",
                                                                                            "anomaly(std.avg).primary": true,
                                                                                            "forecast(std.count).score": 0.5,
                                                                                            "forecast(std.count).level": "error",
                                                                                            "forecast(std.count).primary": true
                                                                                        },
                                                                                        "total": 
                                                                                        {
                                                                                            "std.count": 10,
                                                                                            "std.sum": 1000,
                                                                                            "std.min": 20,
                                                                                            "std.max": 30,
                                                                                            "std.avg": 100,
                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                            "anomaly(std.avg).level": "error",
                                                                                            "anomaly(std.avg).primary": true,
                                                                                            "forecast(std.count).score": 0.5,
                                                                                            "forecast(std.count).level": "error",
                                                                                            "forecast(std.count).primary": true
                                                                                        }
                                                                                    },
                                                                                    "metricType2": "error"
                                                                                },
                                                                                {
                                                                                    "metricType1": 
                                                                                    {
                                                                                        "inherent": 
                                                                                        {
                                                                                            "std.count": 10,
                                                                                            "std.sum": 40,
                                                                                            "std.min": 1,
                                                                                            "std.max": 20,
                                                                                            "std.avg": 4,
                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                            "anomaly(std.avg).level": "error",
                                                                                            "anomaly(std.avg).primary": true,
                                                                                            "forecast(std.count).score": 0.5,
                                                                                            "forecast(std.count).level": "error",
                                                                                            "forecast(std.count).primary": true
                                                                                        },
                                                                                        "total": 
                                                                                        {
                                                                                            "std.count": 10,
                                                                                            "std.sum": 1000,
                                                                                            "std.min": 20,
                                                                                            "std.max": 30,
                                                                                            "std.avg": 100,
                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                            "anomaly(std.avg).level": "error",
                                                                                            "anomaly(std.avg).primary": true,
                                                                                            "forecast(std.count).score": 0.5,
                                                                                            "forecast(std.count).level": "error",
                                                                                            "forecast(std.count).primary": true
                                                                                        }
                                                                                    },
                                                                                    "metricType2": "error"
                                                                                },
                                                                                {
                                                                                    "metricType1": 
                                                                                    {
                                                                                        "inherent": 
                                                                                        {
                                                                                            "std.count": 10,
                                                                                            "std.sum": 40,
                                                                                            "std.min": 1,
                                                                                            "std.max": 20,
                                                                                            "std.avg": 4,
                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                            "anomaly(std.avg).level": "error",
                                                                                            "anomaly(std.avg).primary": true,
                                                                                            "forecast(std.count).score": 0.5,
                                                                                            "forecast(std.count).level": "error",
                                                                                            "forecast(std.count).primary": true
                                                                                        },
                                                                                        "total": 
                                                                                        {
                                                                                            "std.count": 10,
                                                                                            "std.sum": 1000,
                                                                                            "std.min": 20,
                                                                                            "std.max": 30,
                                                                                            "std.avg": 100,
                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                            "anomaly(std.avg).level": "error",
                                                                                            "anomaly(std.avg).primary": true,
                                                                                            "forecast(std.count).score": 0.5,
                                                                                            "forecast(std.count).level": "error",
                                                                                            "forecast(std.count).primary": true
                                                                                        }
                                                                                    },
                                                                                    "metricType2": "error"
                                                                                }
                                                                            ],
                                                                            "metadata": 
                                                                            {
                                                                                "key": "value-1.1"
                                                                            },
                                                                            "children": 
                                                                            [
                                                                                {
                                                                                    "id": "318@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                                    "scope": "a.d.test-b2ee6d0a-7848-4f98-800d-bf2e322431c5",
                                                                                    "metric": "metric1",
                                                                                    "componentType": "txStack",
                                                                                    "measurements": 
                                                                                    [
                                                                                        {
                                                                                            "metricType1": 
                                                                                            {
                                                                                                "inherent": 
                                                                                                {
                                                                                                    "std.count": 20,
                                                                                                    "std.sum": 50,
                                                                                                    "std.min": 1,
                                                                                                    "std.max": 30,
                                                                                                    "std.avg": 2.5,
                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                    "forecast(std.count).level": "error",
                                                                                                    "forecast(std.count).primary": true
                                                                                                },
                                                                                                "total": 
                                                                                                {
                                                                                                    "std.count": 20,
                                                                                                    "std.sum": 500,
                                                                                                    "std.min": 10,
                                                                                                    "std.max": 20,
                                                                                                    "std.avg": 25,
                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                    "forecast(std.count).level": "error",
                                                                                                    "forecast(std.count).primary": true
                                                                                                }
                                                                                            },
                                                                                            "metricType2": "error"
                                                                                        },
                                                                                        {
                                                                                            "metricType1": 
                                                                                            {
                                                                                                "inherent": 
                                                                                                {
                                                                                                    "std.count": 20,
                                                                                                    "std.sum": 50,
                                                                                                    "std.min": 1,
                                                                                                    "std.max": 30,
                                                                                                    "std.avg": 2.5,
                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                    "forecast(std.count).level": "error",
                                                                                                    "forecast(std.count).primary": true
                                                                                                },
                                                                                                "total": 
                                                                                                {
                                                                                                    "std.count": 20,
                                                                                                    "std.sum": 500,
                                                                                                    "std.min": 10,
                                                                                                    "std.max": 20,
                                                                                                    "std.avg": 25,
                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                    "forecast(std.count).level": "error",
                                                                                                    "forecast(std.count).primary": true
                                                                                                }
                                                                                            },
                                                                                            "metricType2": "error"
                                                                                        },
                                                                                        {
                                                                                            "metricType1": 
                                                                                            {
                                                                                                "inherent": 
                                                                                                {
                                                                                                    "std.count": 20,
                                                                                                    "std.sum": 50,
                                                                                                    "std.min": 1,
                                                                                                    "std.max": 30,
                                                                                                    "std.avg": 2.5,
                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                    "forecast(std.count).level": "error",
                                                                                                    "forecast(std.count).primary": true
                                                                                                },
                                                                                                "total": 
                                                                                                {
                                                                                                    "std.count": 20,
                                                                                                    "std.sum": 500,
                                                                                                    "std.min": 10,
                                                                                                    "std.max": 20,
                                                                                                    "std.avg": 25,
                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                    "forecast(std.count).level": "error",
                                                                                                    "forecast(std.count).primary": true
                                                                                                }
                                                                                            },
                                                                                            "metricType2": "error"
                                                                                        },
                                                                                        {
                                                                                            "metricType1": 
                                                                                            {
                                                                                                "inherent": 
                                                                                                {
                                                                                                    "std.count": 20,
                                                                                                    "std.sum": 50,
                                                                                                    "std.min": 1,
                                                                                                    "std.max": 30,
                                                                                                    "std.avg": 2.5,
                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                    "forecast(std.count).level": "error",
                                                                                                    "forecast(std.count).primary": true
                                                                                                },
                                                                                                "total": 
                                                                                                {
                                                                                                    "std.count": 20,
                                                                                                    "std.sum": 500,
                                                                                                    "std.min": 10,
                                                                                                    "std.max": 20,
                                                                                                    "std.avg": 25,
                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                    "forecast(std.count).level": "error",
                                                                                                    "forecast(std.count).primary": true
                                                                                                }
                                                                                            },
                                                                                            "metricType2": "error"
                                                                                        }
                                                                                    ],
                                                                                    "metadata": 
                                                                                    {
                                                                                        "key": "value-1.2",
                                                                                        "parent": "txSecondary",
                                                                                        "entry": "txSecondary"
                                                                                    },
                                                                                    "children": 
                                                                                    [
                                                                                        {
                                                                                            "id": "330@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                                            "scope": "a.d.test-b2ee6d0a-7848-4f98-800d-bf2e322431c5",
                                                                                            "metric": "metric1⟶metric2",
                                                                                            "componentType": "txStack",
                                                                                            "measurements": 
                                                                                            [
                                                                                                {
                                                                                                    "metricType1": 
                                                                                                    {
                                                                                                        "inherent": 
                                                                                                        {
                                                                                                            "std.count": 30,
                                                                                                            "std.sum": 60,
                                                                                                            "std.min": 2,
                                                                                                            "std.max": 40,
                                                                                                            "std.avg": 2,
                                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                                            "anomaly(std.avg).level": "error",
                                                                                                            "anomaly(std.avg).primary": true,
                                                                                                            "forecast(std.count).score": 0.5,
                                                                                                            "forecast(std.count).level": "error",
                                                                                                            "forecast(std.count).primary": true
                                                                                                        },
                                                                                                        "total": 
                                                                                                        {
                                                                                                            "std.count": 30,
                                                                                                            "std.sum": 250,
                                                                                                            "std.min": 5,
                                                                                                            "std.max": 25,
                                                                                                            "std.avg": 8.333,
                                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                                            "anomaly(std.avg).level": "error",
                                                                                                            "anomaly(std.avg).primary": true,
                                                                                                            "forecast(std.count).score": 0.5,
                                                                                                            "forecast(std.count).level": "error",
                                                                                                            "forecast(std.count).primary": true
                                                                                                        }
                                                                                                    },
                                                                                                    "metricType2": "error"
                                                                                                },
                                                                                                {
                                                                                                    "metricType1": 
                                                                                                    {
                                                                                                        "inherent": 
                                                                                                        {
                                                                                                            "std.count": 30,
                                                                                                            "std.sum": 60,
                                                                                                            "std.min": 2,
                                                                                                            "std.max": 40,
                                                                                                            "std.avg": 2,
                                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                                            "anomaly(std.avg).level": "error",
                                                                                                            "anomaly(std.avg).primary": true,
                                                                                                            "forecast(std.count).score": 0.5,
                                                                                                            "forecast(std.count).level": "error",
                                                                                                            "forecast(std.count).primary": true
                                                                                                        },
                                                                                                        "total": 
                                                                                                        {
                                                                                                            "std.count": 30,
                                                                                                            "std.sum": 250,
                                                                                                            "std.min": 5,
                                                                                                            "std.max": 25,
                                                                                                            "std.avg": 8.333,
                                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                                            "anomaly(std.avg).level": "error",
                                                                                                            "anomaly(std.avg).primary": true,
                                                                                                            "forecast(std.count).score": 0.5,
                                                                                                            "forecast(std.count).level": "error",
                                                                                                            "forecast(std.count).primary": true
                                                                                                        }
                                                                                                    },
                                                                                                    "metricType2": "error"
                                                                                                },
                                                                                                {
                                                                                                    "metricType1": 
                                                                                                    {
                                                                                                        "inherent": 
                                                                                                        {
                                                                                                            "std.count": 30,
                                                                                                            "std.sum": 60,
                                                                                                            "std.min": 2,
                                                                                                            "std.max": 40,
                                                                                                            "std.avg": 2,
                                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                                            "anomaly(std.avg).level": "error",
                                                                                                            "anomaly(std.avg).primary": true,
                                                                                                            "forecast(std.count).score": 0.5,
                                                                                                            "forecast(std.count).level": "error",
                                                                                                            "forecast(std.count).primary": true
                                                                                                        },
                                                                                                        "total": 
                                                                                                        {
                                                                                                            "std.count": 30,
                                                                                                            "std.sum": 250,
                                                                                                            "std.min": 5,
                                                                                                            "std.max": 25,
                                                                                                            "std.avg": 8.333,
                                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                                            "anomaly(std.avg).level": "error",
                                                                                                            "anomaly(std.avg).primary": true,
                                                                                                            "forecast(std.count).score": 0.5,
                                                                                                            "forecast(std.count).level": "error",
                                                                                                            "forecast(std.count).primary": true
                                                                                                        }
                                                                                                    },
                                                                                                    "metricType2": "error"
                                                                                                },
                                                                                                {
                                                                                                    "metricType1": 
                                                                                                    {
                                                                                                        "inherent": 
                                                                                                        {
                                                                                                            "std.count": 30,
                                                                                                            "std.sum": 60,
                                                                                                            "std.min": 2,
                                                                                                            "std.max": 40,
                                                                                                            "std.avg": 2,
                                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                                            "anomaly(std.avg).level": "error",
                                                                                                            "anomaly(std.avg).primary": true,
                                                                                                            "forecast(std.count).score": 0.5,
                                                                                                            "forecast(std.count).level": "error",
                                                                                                            "forecast(std.count).primary": true
                                                                                                        },
                                                                                                        "total": 
                                                                                                        {
                                                                                                            "std.count": 30,
                                                                                                            "std.sum": 250,
                                                                                                            "std.min": 5,
                                                                                                            "std.max": 25,
                                                                                                            "std.avg": 8.333,
                                                                                                            "anomaly(std.avg).score": 0.5,
                                                                                                            "anomaly(std.avg).level": "error",
                                                                                                            "anomaly(std.avg).primary": true,
                                                                                                            "forecast(std.count).score": 0.5,
                                                                                                            "forecast(std.count).level": "error",
                                                                                                            "forecast(std.count).primary": true
                                                                                                        }
                                                                                                    },
                                                                                                    "metricType2": "error"
                                                                                                }
                                                                                            ],
                                                                                            "metadata": 
                                                                                            {
                                                                                                "key": "value-1.3",
                                                                                                "parent": "txStack",
                                                                                                "entry": "txSecondary"
                                                                                            },
                                                                                            "children": 
                                                                                            [
                                                                                                {
                                                                                                    "id": "342@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                                                    "scope": "a.d.test-b2ee6d0a-7848-4f98-800d-bf2e322431c5",
                                                                                                    "metric": "metric1⟶metric2⟶exit",
                                                                                                    "componentType": "txExit",
                                                                                                    "measurements": 
                                                                                                    [
                                                                                                        {
                                                                                                            "metricType1": 
                                                                                                            {
                                                                                                                "inherent": 
                                                                                                                {
                                                                                                                    "std.count": 10,
                                                                                                                    "std.sum": 10,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 10,
                                                                                                                    "std.avg": 1,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                },
                                                                                                                "total": 
                                                                                                                {
                                                                                                                    "std.count": 10,
                                                                                                                    "std.sum": 10,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 10,
                                                                                                                    "std.avg": 1,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                }
                                                                                                            },
                                                                                                            "metricType2": "error"
                                                                                                        },
                                                                                                        {
                                                                                                            "metricType1": 
                                                                                                            {
                                                                                                                "inherent": 
                                                                                                                {
                                                                                                                    "std.count": 10,
                                                                                                                    "std.sum": 10,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 10,
                                                                                                                    "std.avg": 1,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                },
                                                                                                                "total": 
                                                                                                                {
                                                                                                                    "std.count": 10,
                                                                                                                    "std.sum": 10,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 10,
                                                                                                                    "std.avg": 1,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                }
                                                                                                            },
                                                                                                            "metricType2": "error"
                                                                                                        },
                                                                                                        {
                                                                                                            "metricType1": 
                                                                                                            {
                                                                                                                "inherent": 
                                                                                                                {
                                                                                                                    "std.count": 10,
                                                                                                                    "std.sum": 10,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 10,
                                                                                                                    "std.avg": 1,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                },
                                                                                                                "total": 
                                                                                                                {
                                                                                                                    "std.count": 10,
                                                                                                                    "std.sum": 10,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 10,
                                                                                                                    "std.avg": 1,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                }
                                                                                                            },
                                                                                                            "metricType2": "error"
                                                                                                        },
                                                                                                        {
                                                                                                            "metricType1": 
                                                                                                            {
                                                                                                                "inherent": 
                                                                                                                {
                                                                                                                    "std.count": 10,
                                                                                                                    "std.sum": 10,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 10,
                                                                                                                    "std.avg": 1,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                },
                                                                                                                "total": 
                                                                                                                {
                                                                                                                    "std.count": 10,
                                                                                                                    "std.sum": 10,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 10,
                                                                                                                    "std.avg": 1,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                }
                                                                                                            },
                                                                                                            "metricType2": "error"
                                                                                                        }
                                                                                                    ],
                                                                                                    "metadata": 
                                                                                                    {
                                                                                                        "key": "value-1.4",
                                                                                                        "parent": "txStack",
                                                                                                        "entry": "txSecondary"
                                                                                                    }
                                                                                                },
                                                                                                {
                                                                                                    "id": "354@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                                                    "scope": "a.d.test-b2ee6d0a-7848-4f98-800d-bf2e322431c5",
                                                                                                    "metric": "metric1⟶metric2⟶metric1",
                                                                                                    "componentType": "txStack",
                                                                                                    "measurements": 
                                                                                                    [
                                                                                                        {
                                                                                                            "metricType1": 
                                                                                                            {
                                                                                                                "inherent": 
                                                                                                                {
                                                                                                                    "std.count": 100,
                                                                                                                    "std.sum": 200,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 20,
                                                                                                                    "std.avg": 2,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                },
                                                                                                                "total": 
                                                                                                                {
                                                                                                                    "std.count": 100,
                                                                                                                    "std.sum": 200,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 20,
                                                                                                                    "std.avg": 2,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                }
                                                                                                            },
                                                                                                            "metricType2": "error"
                                                                                                        },
                                                                                                        {
                                                                                                            "metricType1": 
                                                                                                            {
                                                                                                                "inherent": 
                                                                                                                {
                                                                                                                    "std.count": 100,
                                                                                                                    "std.sum": 200,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 20,
                                                                                                                    "std.avg": 2,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                },
                                                                                                                "total": 
                                                                                                                {
                                                                                                                    "std.count": 100,
                                                                                                                    "std.sum": 200,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 20,
                                                                                                                    "std.avg": 2,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                }
                                                                                                            },
                                                                                                            "metricType2": "error"
                                                                                                        },
                                                                                                        {
                                                                                                            "metricType1": 
                                                                                                            {
                                                                                                                "inherent": 
                                                                                                                {
                                                                                                                    "std.count": 100,
                                                                                                                    "std.sum": 200,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 20,
                                                                                                                    "std.avg": 2,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                },
                                                                                                                "total": 
                                                                                                                {
                                                                                                                    "std.count": 100,
                                                                                                                    "std.sum": 200,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 20,
                                                                                                                    "std.avg": 2,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                }
                                                                                                            },
                                                                                                            "metricType2": "error"
                                                                                                        },
                                                                                                        {
                                                                                                            "metricType1": 
                                                                                                            {
                                                                                                                "inherent": 
                                                                                                                {
                                                                                                                    "std.count": 100,
                                                                                                                    "std.sum": 200,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 20,
                                                                                                                    "std.avg": 2,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                },
                                                                                                                "total": 
                                                                                                                {
                                                                                                                    "std.count": 100,
                                                                                                                    "std.sum": 200,
                                                                                                                    "std.min": 1,
                                                                                                                    "std.max": 20,
                                                                                                                    "std.avg": 2,
                                                                                                                    "anomaly(std.avg).score": 0.5,
                                                                                                                    "anomaly(std.avg).level": "error",
                                                                                                                    "anomaly(std.avg).primary": true,
                                                                                                                    "forecast(std.count).score": 0.5,
                                                                                                                    "forecast(std.count).level": "error",
                                                                                                                    "forecast(std.count).primary": true
                                                                                                                }
                                                                                                            },
                                                                                                            "metricType2": "error"
                                                                                                        }
                                                                                                    ],
                                                                                                    "metadata": 
                                                                                                    {
                                                                                                        "key": "value-1.5",
                                                                                                        "parent": "txStack",
                                                                                                        "entry": "txSecondary"
                                                                                                    }
                                                                                                }
                                                                                            ]
                                                                                        }
                                                                                    ]
                                                                                }
                                                                            ],
                                                                            "logs": 
                                                                            [
                                                                                {
                                                                                    "id": "366@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                                    "scope": "a.d.test-b2ee6d0a-7848-4f98-800d-bf2e322431c5",
                                                                                    "metric": "",
                                                                                    "componentType": "txSecondaryLog",
                                                                                    "measurements": 
                                                                                    [
                                                                                        {
                                                                                            "txSecondaryLog": 
                                                                                            {
                                                                                                "transactionId": 1,
                                                                                                "value": "testLog7"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryLog": 
                                                                                            {
                                                                                                "transactionId": 2,
                                                                                                "value": "testLog8"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryLog": 
                                                                                            {
                                                                                                "transactionId": 3,
                                                                                                "value": "testLog9"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryLog": 
                                                                                            {
                                                                                                "transactionId": 1,
                                                                                                "value": "testLog7"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryLog": 
                                                                                            {
                                                                                                "transactionId": 2,
                                                                                                "value": "testLog8"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryLog": 
                                                                                            {
                                                                                                "transactionId": 3,
                                                                                                "value": "testLog9"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryLog": 
                                                                                            {
                                                                                                "transactionId": 1,
                                                                                                "value": "testLog7"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryLog": 
                                                                                            {
                                                                                                "transactionId": 2,
                                                                                                "value": "testLog8"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryLog": 
                                                                                            {
                                                                                                "transactionId": 3,
                                                                                                "value": "testLog9"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryLog": 
                                                                                            {
                                                                                                "transactionId": 1,
                                                                                                "value": "testLog7"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryLog": 
                                                                                            {
                                                                                                "transactionId": 2,
                                                                                                "value": "testLog8"
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryLog": 
                                                                                            {
                                                                                                "transactionId": 3,
                                                                                                "value": "testLog9"
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "metadata": 
                                                                                    {
                                                                                        "key": "value-1.6",
                                                                                        "entry": "txSecondary"
                                                                                    }
                                                                                },
                                                                                {
                                                                                    "id": "372@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                                                    "scope": "a.d.test-b2ee6d0a-7848-4f98-800d-bf2e322431c5",
                                                                                    "metric": "",
                                                                                    "componentType": "txSecondaryError",
                                                                                    "measurements": 
                                                                                    [
                                                                                        {
                                                                                            "txSecondaryError": 
                                                                                            {
                                                                                                "transactionId": 1,
                                                                                                "exception": 
                                                                                                {
                                                                                                    "class": "TestException3",
                                                                                                    "stackTrace": 
                                                                                                    [
                                                                                                        {
                                                                                                            "class": "class31",
                                                                                                            "method": "method31"
                                                                                                        },
                                                                                                        {
                                                                                                            "class": "class32",
                                                                                                            "method": "method32"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryError": 
                                                                                            {
                                                                                                "transactionId": 1,
                                                                                                "stackTrace": 
                                                                                                [
                                                                                                    {
                                                                                                        "class": "testClass31",
                                                                                                        "method": "testMethod31"
                                                                                                    },
                                                                                                    {
                                                                                                        "class": "testClass32",
                                                                                                        "method": "testMethod32"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryError": 
                                                                                            {
                                                                                                "transactionId": 2,
                                                                                                "stackTrace": 
                                                                                                [
                                                                                                    {
                                                                                                        "class": "testClass31",
                                                                                                        "method": "testMethod33"
                                                                                                    },
                                                                                                    {
                                                                                                        "class": "testClass32",
                                                                                                        "method": "testMethod32"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryError": 
                                                                                            {
                                                                                                "transactionId": 1,
                                                                                                "exception": 
                                                                                                {
                                                                                                    "class": "TestException3",
                                                                                                    "stackTrace": 
                                                                                                    [
                                                                                                        {
                                                                                                            "class": "class31",
                                                                                                            "method": "method31"
                                                                                                        },
                                                                                                        {
                                                                                                            "class": "class32",
                                                                                                            "method": "method32"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryError": 
                                                                                            {
                                                                                                "transactionId": 1,
                                                                                                "stackTrace": 
                                                                                                [
                                                                                                    {
                                                                                                        "class": "testClass31",
                                                                                                        "method": "testMethod31"
                                                                                                    },
                                                                                                    {
                                                                                                        "class": "testClass32",
                                                                                                        "method": "testMethod32"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryError": 
                                                                                            {
                                                                                                "transactionId": 2,
                                                                                                "stackTrace": 
                                                                                                [
                                                                                                    {
                                                                                                        "class": "testClass31",
                                                                                                        "method": "testMethod33"
                                                                                                    },
                                                                                                    {
                                                                                                        "class": "testClass32",
                                                                                                        "method": "testMethod32"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryError": 
                                                                                            {
                                                                                                "transactionId": 1,
                                                                                                "exception": 
                                                                                                {
                                                                                                    "class": "TestException3",
                                                                                                    "stackTrace": 
                                                                                                    [
                                                                                                        {
                                                                                                            "class": "class31",
                                                                                                            "method": "method31"
                                                                                                        },
                                                                                                        {
                                                                                                            "class": "class32",
                                                                                                            "method": "method32"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryError": 
                                                                                            {
                                                                                                "transactionId": 1,
                                                                                                "stackTrace": 
                                                                                                [
                                                                                                    {
                                                                                                        "class": "testClass31",
                                                                                                        "method": "testMethod31"
                                                                                                    },
                                                                                                    {
                                                                                                        "class": "testClass32",
                                                                                                        "method": "testMethod32"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryError": 
                                                                                            {
                                                                                                "transactionId": 2,
                                                                                                "stackTrace": 
                                                                                                [
                                                                                                    {
                                                                                                        "class": "testClass31",
                                                                                                        "method": "testMethod33"
                                                                                                    },
                                                                                                    {
                                                                                                        "class": "testClass32",
                                                                                                        "method": "testMethod32"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryError": 
                                                                                            {
                                                                                                "transactionId": 1,
                                                                                                "exception": 
                                                                                                {
                                                                                                    "class": "TestException3",
                                                                                                    "stackTrace": 
                                                                                                    [
                                                                                                        {
                                                                                                            "class": "class31",
                                                                                                            "method": "method31"
                                                                                                        },
                                                                                                        {
                                                                                                            "class": "class32",
                                                                                                            "method": "method32"
                                                                                                        }
                                                                                                    ]
                                                                                                }
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryError": 
                                                                                            {
                                                                                                "transactionId": 1,
                                                                                                "stackTrace": 
                                                                                                [
                                                                                                    {
                                                                                                        "class": "testClass31",
                                                                                                        "method": "testMethod31"
                                                                                                    },
                                                                                                    {
                                                                                                        "class": "testClass32",
                                                                                                        "method": "testMethod32"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        },
                                                                                        {
                                                                                            "txSecondaryError": 
                                                                                            {
                                                                                                "transactionId": 2,
                                                                                                "stackTrace": 
                                                                                                [
                                                                                                    {
                                                                                                        "class": "testClass31",
                                                                                                        "method": "testMethod33"
                                                                                                    },
                                                                                                    {
                                                                                                        "class": "testClass32",
                                                                                                        "method": "testMethod32"
                                                                                                    }
                                                                                                ]
                                                                                            }
                                                                                        }
                                                                                    ],
                                                                                    "metadata": 
                                                                                    {
                                                                                        "key": "value-1.7",
                                                                                        "entry": "txSecondary"
                                                                                    }
                                                                                }
                                                                            ]
                                                                        }
                                                                    }
                                                                ]
                                                            }
                                                        ]
                                                    }
                                                ],
                                                "logs": 
                                                [
                                                    {
                                                        "id": "286@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                        "scope": "a.c.test-853f7d7b-01cd-44bc-bda0-dc4c15a82bd3",
                                                        "metric": "",
                                                        "componentType": "txSecondaryLog",
                                                        "measurements": 
                                                        [
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "value": "testLog7"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 2,
                                                                    "value": "testLog8"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 3,
                                                                    "value": "testLog9"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "value": "testLog7"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 2,
                                                                    "value": "testLog8"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 3,
                                                                    "value": "testLog9"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "value": "testLog7"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 2,
                                                                    "value": "testLog8"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 3,
                                                                    "value": "testLog9"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "value": "testLog7"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 2,
                                                                    "value": "testLog8"
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryLog": 
                                                                {
                                                                    "transactionId": 3,
                                                                    "value": "testLog9"
                                                                }
                                                            }
                                                        ],
                                                        "metadata": 
                                                        {
                                                            "key": "value-1.6",
                                                            "entry": "txSecondary"
                                                        }
                                                    },
                                                    {
                                                        "id": "292@aggregation-aggregation-p1-17/data-17.dt[0]",
                                                        "scope": "a.c.test-853f7d7b-01cd-44bc-bda0-dc4c15a82bd3",
                                                        "metric": "",
                                                        "componentType": "txSecondaryError",
                                                        "measurements": 
                                                        [
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "exception": 
                                                                    {
                                                                        "class": "TestException3",
                                                                        "stackTrace": 
                                                                        [
                                                                            {
                                                                                "class": "class31",
                                                                                "method": "method31"
                                                                            },
                                                                            {
                                                                                "class": "class32",
                                                                                "method": "method32"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 2,
                                                                    "stackTrace": 
                                                                    [
                                                                        {
                                                                            "class": "testClass31",
                                                                            "method": "testMethod31"
                                                                        },
                                                                        {
                                                                            "class": "testClass32",
                                                                            "method": "testMethod32"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "exception": 
                                                                    {
                                                                        "class": "TestException3",
                                                                        "stackTrace": 
                                                                        [
                                                                            {
                                                                                "class": "class31",
                                                                                "method": "method31"
                                                                            },
                                                                            {
                                                                                "class": "class32",
                                                                                "method": "method32"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 2,
                                                                    "stackTrace": 
                                                                    [
                                                                        {
                                                                            "class": "testClass31",
                                                                            "method": "testMethod31"
                                                                        },
                                                                        {
                                                                            "class": "testClass32",
                                                                            "method": "testMethod32"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "exception": 
                                                                    {
                                                                        "class": "TestException3",
                                                                        "stackTrace": 
                                                                        [
                                                                            {
                                                                                "class": "class31",
                                                                                "method": "method31"
                                                                            },
                                                                            {
                                                                                "class": "class32",
                                                                                "method": "method32"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 2,
                                                                    "stackTrace": 
                                                                    [
                                                                        {
                                                                            "class": "testClass31",
                                                                            "method": "testMethod31"
                                                                        },
                                                                        {
                                                                            "class": "testClass32",
                                                                            "method": "testMethod32"
                                                                        }
                                                                    ]
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 1,
                                                                    "exception": 
                                                                    {
                                                                        "class": "TestException3",
                                                                        "stackTrace": 
                                                                        [
                                                                            {
                                                                                "class": "class31",
                                                                                "method": "method31"
                                                                            },
                                                                            {
                                                                                "class": "class32",
                                                                                "method": "method32"
                                                                            }
                                                                        ]
                                                                    }
                                                                }
                                                            },
                                                            {
                                                                "txSecondaryError": 
                                                                {
                                                                    "transactionId": 2,
                                                                    "stackTrace": 
                                                                    [
                                                                        {
                                                                            "class": "testClass31",
                                                                            "method": "testMethod31"
                                                                        },
                                                                        {
                                                                            "class": "testClass32",
                                                                            "method": "testMethod32"
                                                                        }
                                                                    ]
                                                                }
                                                            }
                                                        ],
                                                        "metadata": 
                                                        {
                                                            "key": "value-1.7",
                                                            "entry": "txSecondary"
                                                        }
                                                    }
                                                ]
                                            }
                                        },
                                        {
                                            "id": "102@aggregation-aggregation-p1-17/data-17.dt[0]",
                                            "scope": "a.b.primary",
                                            "metric": "metric1⟶metric2⟶metric1",
                                            "componentType": "txStack",
                                            "measurements": 
                                            [
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                }
                                            ],
                                            "metadata": 
                                            {
                                                "key": "value-1.5",
                                                "parent": "txStack",
                                                "entry": "txPrimary"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "logs": 
                    [
                        {
                            "id": "114@aggregation-aggregation-p1-17/data-17.dt[0]",
                            "scope": "a.b.primary",
                            "metric": "",
                            "componentType": "txPrimaryLog",
                            "measurements": 
                            [
                                {
                                    "txPrimaryLog": 
                                    {
                                        "transactionId": 1,
                                        "value": "testLog1"
                                    }
                                },
                                {
                                    "txPrimaryLog": 
                                    {
                                        "transactionId": 2,
                                        "value": "testLog2"
                                    }
                                },
                                {
                                    "txPrimaryLog": 
                                    {
                                        "transactionId": 3,
                                        "value": "testLog3"
                                    }
                                },
                                {
                                    "txPrimaryLog": 
                                    {
                                        "transactionId": 1,
                                        "value": "testLog1"
                                    }
                                },
                                {
                                    "txPrimaryLog": 
                                    {
                                        "transactionId": 2,
                                        "value": "testLog2"
                                    }
                                },
                                {
                                    "txPrimaryLog": 
                                    {
                                        "transactionId": 3,
                                        "value": "testLog3"
                                    }
                                },
                                {
                                    "txPrimaryLog": 
                                    {
                                        "transactionId": 1,
                                        "value": "testLog1"
                                    }
                                },
                                {
                                    "txPrimaryLog": 
                                    {
                                        "transactionId": 2,
                                        "value": "testLog2"
                                    }
                                },
                                {
                                    "txPrimaryLog": 
                                    {
                                        "transactionId": 3,
                                        "value": "testLog3"
                                    }
                                },
                                {
                                    "txPrimaryLog": 
                                    {
                                        "transactionId": 1,
                                        "value": "testLog1"
                                    }
                                },
                                {
                                    "txPrimaryLog": 
                                    {
                                        "transactionId": 2,
                                        "value": "testLog2"
                                    }
                                },
                                {
                                    "txPrimaryLog": 
                                    {
                                        "transactionId": 3,
                                        "value": "testLog3"
                                    }
                                }
                            ],
                            "metadata": 
                            {
                                "key": "value-1.6",
                                "entry": "txPrimary"
                            }
                        },
                        {
                            "id": "120@aggregation-aggregation-p1-17/data-17.dt[0]",
                            "scope": "a.b.primary",
                            "metric": "",
                            "componentType": "txPrimaryError",
                            "measurements": 
                            [
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 1,
                                        "exception": 
                                        {
                                            "class": "TestException1",
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "class1",
                                                    "method": "method1"
                                                },
                                                {
                                                    "class": "class2",
                                                    "method": "method2"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 1,
                                        "exception": 
                                        {
                                            "class": "TestException1",
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "class1",
                                                    "method": "method1"
                                                },
                                                {
                                                    "class": "class2",
                                                    "method": "method3"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 2,
                                        "stackTrace": 
                                        [
                                            {
                                                "class": "class1",
                                                "method": "testMethod1"
                                            },
                                            {
                                                "class": "testClass2",
                                                "method": "testMethod2"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 2,
                                        "stackTrace": 
                                        [
                                            {
                                                "class": "class1",
                                                "method": "testMethod1"
                                            },
                                            {
                                                "class": "testClass2",
                                                "method": "testMethod3"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 1,
                                        "exception": 
                                        {
                                            "class": "TestException1",
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "class1",
                                                    "method": "method1"
                                                },
                                                {
                                                    "class": "class2",
                                                    "method": "method2"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 1,
                                        "exception": 
                                        {
                                            "class": "TestException1",
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "class1",
                                                    "method": "method1"
                                                },
                                                {
                                                    "class": "class2",
                                                    "method": "method3"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 2,
                                        "stackTrace": 
                                        [
                                            {
                                                "class": "class1",
                                                "method": "testMethod1"
                                            },
                                            {
                                                "class": "testClass2",
                                                "method": "testMethod2"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 2,
                                        "stackTrace": 
                                        [
                                            {
                                                "class": "class1",
                                                "method": "testMethod1"
                                            },
                                            {
                                                "class": "testClass2",
                                                "method": "testMethod3"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 1,
                                        "exception": 
                                        {
                                            "class": "TestException1",
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "class1",
                                                    "method": "method1"
                                                },
                                                {
                                                    "class": "class2",
                                                    "method": "method2"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 1,
                                        "exception": 
                                        {
                                            "class": "TestException1",
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "class1",
                                                    "method": "method1"
                                                },
                                                {
                                                    "class": "class2",
                                                    "method": "method3"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 2,
                                        "stackTrace": 
                                        [
                                            {
                                                "class": "class1",
                                                "method": "testMethod1"
                                            },
                                            {
                                                "class": "testClass2",
                                                "method": "testMethod2"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 2,
                                        "stackTrace": 
                                        [
                                            {
                                                "class": "class1",
                                                "method": "testMethod1"
                                            },
                                            {
                                                "class": "testClass2",
                                                "method": "testMethod3"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 1,
                                        "exception": 
                                        {
                                            "class": "TestException1",
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "class1",
                                                    "method": "method1"
                                                },
                                                {
                                                    "class": "class2",
                                                    "method": "method2"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 1,
                                        "exception": 
                                        {
                                            "class": "TestException1",
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "class1",
                                                    "method": "method1"
                                                },
                                                {
                                                    "class": "class2",
                                                    "method": "method3"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 2,
                                        "stackTrace": 
                                        [
                                            {
                                                "class": "class1",
                                                "method": "testMethod1"
                                            },
                                            {
                                                "class": "testClass2",
                                                "method": "testMethod2"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "txPrimaryError": 
                                    {
                                        "transactionId": 2,
                                        "stackTrace": 
                                        [
                                            {
                                                "class": "class1",
                                                "method": "testMethod1"
                                            },
                                            {
                                                "class": "testClass2",
                                                "method": "testMethod3"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "metadata": 
                            {
                                "key": "value-1.7",
                                "entry": "txPrimary"
                            }
                        }
                    ]
                }
            ]
        },
        "<orphaned>": 
        []
    }
}