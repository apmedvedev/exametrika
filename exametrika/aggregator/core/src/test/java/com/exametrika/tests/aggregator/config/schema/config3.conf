{	
	modules:
	{
		module1:
		{
			version = "1.0.0"
			schema:
			{
				instanceOf = "AggregationSchema"
				version = 2
				periodTypes:
				{
					p2:
					{
						period:
						{
							kind = "absolute"
							type = "minute"
							amount = 10
						}
						cyclePeriodCount = 100
						componentTypes:
						{
							test1:
							{
								instanceOf = "NameComponentType"
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "Gauge"
									}
							
									metricType2:
									{
										instanceOf = "Counter"
									}
										
									metricType3:
									{
										instanceOf = "StackCounter"
									}
										
									metricType4:
									{
										instanceOf = "Info"
									}
								}
								scopeAggregationStrategies = []
                                metricAggregationStrategies = []
                                ruleRepresentation = null
							}
															
							test2:
							{
								instanceOf = "NameComponentType"
								hasLog = true
								metricTypes:
								{
									metricType5:
									{
										instanceOf = "Log"
									}
								}
								scopeAggregationStrategies = []
                                metricAggregationStrategies = []
                                ruleRepresentation = null
							}
			
							test3:
							{
								instanceOf = "NameComponentType"
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "Gauge"
										fields:
										[
											{
												instanceOf = "StandardFields"
											}
											
											{
												instanceOf = "StatisticsFields"
											}
											
											{
												instanceOf = "UniformHistogramFields"
											    maxBound = 100
												binCount = 10
											}
											
											{
												instanceOf = "InstanceFields"
												instanceCount = 10
												max = true
											}
											
											{
												instanceOf = "AnomalyFields"
												name = "anomaly1"
												baseRepresentation = "test1"
												baseField = "std.count"
												fast = true
												sensitivityAutoAdjustment = false
												initialSensitivity = 0.11
												sensitivityIncrement = 0.02
												maxSensitivity = 0.3
												initialLearningPeriod = 100
												initialAdjustmentLearningPeriod = 50
												anomaliesEstimationPeriod = 200
												maxAnomaliesPerEstimationPeriodPercentage = 10
												maxAnomaliesPerType = 3
												behaviorTypeLabelStrategy:
												{ 
													instanceOf = "TestBehaviorTypeLabelStrategy"
												}
											}
											
											{
												instanceOf = "ForecastFields"
												name = "anomaly2"
												baseRepresentation = "test1"
												baseField = "std.sum"
												anomalyAutoLabeling = false
											}
										]
										representations:
										{
											test1:
											{
												fields:
												[
													{
														instanceOf = "StandardRepresentation"
														enabled = false
													}
													
													{
														instanceOf = "StatisticsRepresentation"
													}
													
													{
														instanceOf = "UniformHistogramRepresentation"
														computeValues = true
														computePercentages = true
														computeCumulativePercentages = true
														computeScale = true
														binCount = 10
														minBound = 0
														maxBound = 100
														percentiles = [5, 50, 95]
													}
													
													{
														instanceOf = "InstanceRepresentation"
													}
													
													{
														instanceOf = "RateRepresentation"
														baseField = "standard.sum"
													}
													
													{
														instanceOf = "RateRepresentation"
														name = "rate(count)"
														baseField = "standard.count"
													}
													
													{
														instanceOf = "PeriodRepresentation"
														baseField = "standard.sum"
													}
													
													{
														instanceOf = "PeriodRepresentation"
														name = "period(count)"
														baseField = "standard.count"
													}
													
													{
														instanceOf = "PercentageRepresentation"
														navigationType = "parentScope"
														baseField = "standard.sum"
													}
													
													{
														instanceOf = "PercentageRepresentation"
														name = "percentage(count)"
														navigationType = "parentScope"
														navigationArgs = "args"
														currentField = "inherent.standard.count"
														baseField = "total.standard.count"
														nodeType = "nodeType1"
													}
													
													{
														instanceOf = "AnomalyRepresentation"
														name = "anomaly1"
														computeBehaviorTypes = false
													}
													
													{
														instanceOf = "ForecastRepresentation"
														name = "anomaly2"
														computePredictions = false
														predictionsStepCount = 20
													}
												]
											}
											
											test2:
											{
												fields:
												[
													{
														instanceOf = "StandardRepresentation"
														enabled = false
													}
													
													{
														instanceOf = "LogarithmicHistogramRepresentation"
														binCount = 10
														minBound = 0
													}
												]
											}
											
											test3:
											{
												fields:
												[
													{
														instanceOf = "CustomHistogramRepresentation"
														bounds = [0, 1, 2]
													}
												]
											}
										}
									}
								
									metricType2:
									{
										instanceOf = "AnomalyIndex"
										baseRepresentation = "test1"
										minAnomalyMetricCount = 2
										representations:
										{
											test1:{}
										}
									}
									
									metricType3:
									{
										instanceOf = "ExpressionIndex"
										stored = true
										baseRepresentation = "test1"
										representations:
										{
											test1:{ expression = "test1" }
											test2:"test2"
										}
									}
								}
								scopeAggregationStrategies = []
                                metricAggregationStrategies = []
                                ruleRepresentation = null
							}
		
							test4:
							{
								instanceOf = "NameComponentType"
								hasLog = true
								metricTypes:
								{
									metricType6:
									{
										instanceOf = "Log"
										filter:
										{
											instanceOf = "TestAggregationLogFilter"
										}
										transformers:
										[
										 	{ instanceOf = "TestAggregationLogTransformer" }
										]
										fullTextIndex = true
										documentSchemaFactory:
										{
											instanceOf = "TestDocumentSchemaFactory"
										}
										representations:
										{
											test1:
											{
												instanceOf = "TestObjectRepresentation"
											}
										}
									}
								}
								scopeAggregationStrategies = []
                                metricAggregationStrategies = []
                                ruleRepresentation = null
							}
						}
					}
				}
			}
		}
	}
}	