{
	imports = ["config2.conf", "config3.conf"]
	
	modules:
	{
		module1:
		{
			version = "1.0.0"
			schema:
			{
				instanceOf = "AggregationSchema"
				version = 2
				periodTypes:
				{
					p1:
					{
						period:
						{
							kind = "absolute"
							type = "second"
							amount = 10
						}
						cyclePeriodCount = 1
						nonAggregating = true
						componentTypes:
						{
							name1:
							{
								instanceOf = "NameComponentType"
							    scopeAggregationStrategies = []
                                metricAggregationStrategies = []
								ruleRepresentation = null
							}
						
							name2:
							{
								instanceOf = "NameComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "Gauge"
									}
								}
								
								filter:
								{
									instanceOf = "TestMeasurementFilter"
								}
								
								scopeAggregationStrategies:
								[
								 	{ instanceOf = "TestScopeAggregationStrategy"}
								]
									
								metricAggregationStrategies:
								[
								 	{ instanceOf = "TestMetricAggregationStrategy"}
								]
								
								aggregationFilter:
								{
									instanceOf = "TestAggregationFilter"
								}
								
								allowHierarchyAggregation = true
								allowTransferDerived = true
                                ruleRepresentation = null
							}
								
							stackName1:
							{
								instanceOf = "StackNameComponentType"
							    scopeAggregationStrategies = []
                                metricAggregationStrategies = []
                                ruleRepresentation = null
							}
						
							stackName2:
							{
								instanceOf = "StackNameComponentType"
								hasLog = true
                                ruleRepresentation = null
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "Gauge"
									}
								}
								
								filter:
								{
									instanceOf = "TestMeasurementFilter"
								}
								
								scopeAggregationStrategies:
								[
								 	{ instanceOf = "TestScopeAggregationStrategy"}
								]
									
								metricAggregationStrategies:
								[
								 	{ instanceOf = "TestMetricAggregationStrategy"}
								]
								
								aggregationFilter:
								{
									instanceOf = "TestAggregationFilter"
								}
								
								allowHierarchyAggregation = true
								allowTransferDerived = true
							}
								
							backgroundStack1:
							{
								instanceOf = "StackComponentType"
							    ruleRepresentation = null
							}
						
							backgroundStack2:
							{
								instanceOf = "StackComponentType"
								hasLog = true
								ruleRepresentation = null
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "Gauge"
									}
								}
								
								filter:
								{
									instanceOf = "TestMeasurementFilter"
								}
								
								stackNameComponentType = "stackName1"
							}
								
							backgroundExitPoint1:
							{
								instanceOf = "ExitPointComponentType"
							    ruleRepresentation = null
							}
						
							backgroundExitPoint2:
							{
								instanceOf = "ExitPointComponentType"
								hasLog = true
								ruleRepresentation = null
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "Gauge"
									}
								}
								
								filter:
								{
									instanceOf = "TestMeasurementFilter"
								}
								
								stackNameComponentType = "stackName1"
							}
								
							backgroundRoot1:
							{
								instanceOf = "BackgroundRootComponentType"
							    ruleRepresentation = null
							}
						
							backgroundRoot2:
							{
								instanceOf = "BackgroundRootComponentType"
								hasLog = true
								ruleRepresentation = null
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "Gauge"
									}
								}
								
								filter:
								{
									instanceOf = "TestMeasurementFilter"
								}
								
								stackNameComponentType = "stackName1"
									
								scopeAggregationStrategies:
								[
								 	{ instanceOf = "TestScopeAggregationStrategy"}
								]
								
								allowHierarchyAggregation = true
								allowStackNameAggregation = true
								allowAnomaliesCorrelation = true
								anomaliesComponentType = "test"
							}
						}
				
					}
				}
			}
		}
	}
}	