{
	modules:
	{
		module1:
		{
			version = "1.0.0"
			schema:
			{
				instanceOf = "AggregationSchema"
				version = 1
				periodTypes:
				{
					p1:
					{
						period:
						{
							kind = "relative"
							type = "hour"
							amount = 1
						}
						cyclePeriodCount = 1
						nonAggregating = true
						
						componentTypes:
						{
							stack:
							{
								instanceOf = "StackComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "StackCounter"
									}
								}
								
								filter:
								{
									instanceOf = "TestMeasurementFilter"
									pattern = "*scope1*"
								}
							}
						
							stackExit:
							{
								instanceOf = "ExitPointComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "StackCounter"
									}
								}
								
								filter:
								{
									instanceOf = "TestMeasurementFilter"
									pattern = "*scope1*"
								}
							}
							
							stackRoot:
							{
								instanceOf = "BackgroundRootComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "StackCounter"
									}
								}
								
								filter:
								{
									instanceOf = "TestMeasurementFilter"
									pattern = "*scope1*"
								}
							}
							
							stackLog:
							{
								instanceOf = "StackLogComponentType"
								hasLog = true
                                metricTypes:
                                {
                                    stackLog:
                                    {
                                        instanceOf = "Log"
                                    }
                                }
								
								filter:
								{
									instanceOf = "TestMeasurementFilter"
									pattern = "*scope1*"
								}
							}
							
							stackError:
							{
								instanceOf = "StackErrorLogComponentType"
								metricType:
								{
								}
								
								filter:
								{
									instanceOf = "TestMeasurementFilter"
									pattern = "*scope1*"
								}
							}
						}
					}
				
					p2:
					{
						period:
						{
							kind = "relative"
							type = "minute"
							amount = 1
						}
						cyclePeriodCount = 10
						
						componentTypes:
						{
							stack:
							{
								instanceOf = "StackComponentType"
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "StackCounter"
									}
								}
								stackNameComponentType = "stackName"
							}
						
							stackExit:
							{
								instanceOf = "ExitPointComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "StackCounter"
									}
								}
								stackNameComponentType = "stackName"
							}
							
							stackRoot:
							{
								instanceOf = "BackgroundRootComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "StackCounter"
									}
								}
								stackNameComponentType = "stackName"
								
								scopeAggregationStrategies:
								[
								 	{ instanceOf = "TestScopeAggregationStrategy" }
								]
								
								allowHierarchyAggregation = true
								allowStackNameAggregation = true
							}
							
							stackName:
							{
								instanceOf = "StackNameComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "StackCounter"
									}
								}
								
								scopeAggregationStrategies:
								[
								 	{ instanceOf = "TestScopeAggregationStrategy" }
								]
									
								metricAggregationStrategies:
								[
								 	{ instanceOf = "TestMetricAggregationStrategy" }
								]
								
								allowHierarchyAggregation = true
							}
								
							stackLog:
							{
								instanceOf = "StackLogComponentType"
								allowHierarchyAggregation = true
								hasLog = true
                                metricTypes:
                                {
                                    stackLog:
                                    {
                                        instanceOf = "Log"
                                    }
                                }
							}
							
							stackError:
							{
								instanceOf = "StackErrorLogComponentType"
								allowHierarchyAggregation = true
								allowTypedErrorAggregation = true
								errorComponentType = "stackErrorName"
								errorAggregationStrategies:
								[
								 	{ instanceOf = "TestErrorAggregationStrategy" }
								]
							}
								
							stackErrorName:
							{
								instanceOf = "StackNameComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "Counter"
									}
								}
								
								scopeAggregationStrategies:
								[
								 	{ instanceOf = "TestScopeAggregationStrategy" }
								]
									
								metricAggregationStrategies:
								[
								 	{ instanceOf = "TestMetricAggregationStrategy" }
								]
								
								allowHierarchyAggregation = true
							}
						}
					}
					
					p3:
					{
						period:
						{
							kind = "relative"
							type = "minute"
							amount = 10
						}
						cyclePeriodCount = 10
						parentDomain = "testDomain"
						componentTypes:
						{
							stack:
							{
								instanceOf = "StackComponentType"
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "StackCounter"
									}
								}
								stackNameComponentType = "stackName"
							}
						
							stackExit:
							{
								instanceOf = "ExitPointComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "StackCounter"
									}
								}
								stackNameComponentType = "stackName"
							}
							
							stackRoot:
							{
								instanceOf = "BackgroundRootComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "StackCounter"
									}
								}
								stackNameComponentType = "stackName"
								
								scopeAggregationStrategies:
								[
								 	{ instanceOf = "TestScopeAggregationStrategy" }
								]
								
								allowHierarchyAggregation = true
								allowStackNameAggregation = true
							}
							
							stackName:
							{
								instanceOf = "StackNameComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "StackCounter"
									}
								}
								
								scopeAggregationStrategies:
								[
								 	{ instanceOf = "TestScopeAggregationStrategy" }
								]
									
								metricAggregationStrategies:
								[
								 	{ instanceOf = "TestMetricAggregationStrategy" }
								]
								
								allowHierarchyAggregation = true
							}
								
							stackLog:
							{
								instanceOf = "StackLogComponentType"
								allowHierarchyAggregation = true
								hasLog = true
                                metricTypes:
                                {
                                    stackLog:
                                    {
                                        instanceOf = "Log"
                                    }
                                }
							}
							
							stackError:
							{
								instanceOf = "StackErrorLogComponentType"
								allowHierarchyAggregation = true
								allowTypedErrorAggregation = true
								errorComponentType = "stackErrorName"
								stackTraceFilter = "*test*"
								errorAggregationStrategies:
								[
								 	{ instanceOf = "TestErrorAggregationStrategy" }
								]
							}
								
							stackErrorName:
							{
								instanceOf = "StackNameComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "Counter"
									}
								}
								
								scopeAggregationStrategies:
								[
								 	{ instanceOf = "TestScopeAggregationStrategy" }
								]
									
								metricAggregationStrategies:
								[
								 	{ instanceOf = "TestMetricAggregationStrategy" }
								]
								
								allowHierarchyAggregation = true
							}
						}
					}
				}
			}
		}
	}
}	