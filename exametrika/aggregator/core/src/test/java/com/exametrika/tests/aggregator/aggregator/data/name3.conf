{
	modules:
	{
		module1:
		{
			version = "1.0.0"
			schema:
			{
				instanceOf = "AggregationSchema"
				version = 1
				periodTypes:
				{
					p1:
					{
						period:
						{
							kind = "relative"
							type = "hour"
							amount = 1
						}
						cyclePeriodCount = 1
						nonAggregating = true
						
						componentTypes:
						{
							name1:
							{
								instanceOf = "NameComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "Gauge"
										fields:
										[
										 	{ instanceOf = "StandardFields" },
										 	{ 
										 		instanceOf = "AnomalyFields"
									 			name = "anomaly(std.avg)"
								 				baseRepresentation = "default"
							 					baseField = "std.avg"
								 			},
								 			{ 
										 		instanceOf = "ForecastFields"
									 			name = "forecast(std.count)"
								 				baseRepresentation = "default"
							 					baseField = "std.count"
								 			}
										]
										representations:
										{
											"default":
											{
												fields:
												[
												 	{ instanceOf = "StandardRepresentation" },
												 	{ instanceOf = "AnomalyRepresentation" name = "anomaly(std.avg)"},
												 	{ instanceOf = "ForecastRepresentation" name = "forecast(std.count)"}
												]
											}
										}
									}
								
									metricType2:
									{
										instanceOf = "AnomalyIndex"
									    minAnomalyMetricCount = 1
									}
									
									metricType3:
									{
										instanceOf = "ExpressionIndex"
										representations:
										{
											"default" = "metric('metricType1.std.avg') + metric('metricType1.anomaly(std.avg).score')"
										}
									}
										
									metricType4:
									{
										instanceOf = "ExpressionIndex"
										stored = true
										representations:
										{
											"default" = "metric('metricType3')"
										}
									}
								}
							}
						}
					}
				
					p2:
					{
						period:
						{
							kind = "relative"
							type = "minute"
							amount = 1
						}
						cyclePeriodCount = 10
						
						componentTypes:
						{
							name1:
							{
								instanceOf = "NameComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "Gauge"
										fields:
										[
										 	{ instanceOf = "StandardFields" },
										 	{ 
										 		instanceOf = "AnomalyFields"
									 			name = "anomaly(std.avg)"
								 				baseRepresentation = "default"
							 					baseField = "std.avg"
								 			},
								 			{ 
										 		instanceOf = "ForecastFields"
									 			name = "forecast(std.count)"
								 				baseRepresentation = "default"
							 					baseField = "std.count"
								 			}
										]
										representations:
										{
											"default":
											{
												fields:
												[
												 	{ instanceOf = "StandardRepresentation" },
												 	{ instanceOf = "AnomalyRepresentation" name = "anomaly(std.avg)"},
												 	{ instanceOf = "ForecastRepresentation" name = "forecast(std.count)"}
												]
											}
										}
									}
								
									metricType2:
									{
										instanceOf = "AnomalyIndex"
									    minAnomalyMetricCount = 1
									}
									
									metricType3:
									{
										instanceOf = "ExpressionIndex"
										representations:
										{
											"default" = "metric('metricType1.std.avg') + metric('metricType1.anomaly(std.avg).score')"
										}
									}
									
									metricType4:
									{
										instanceOf = "ExpressionIndex"
										stored = true
										representations:
										{
											"default" = "metric('metricType3')"
										}
									}
								}
								
								scopeAggregationStrategies:
								[
								 	{ instanceOf = "TestScopeAggregationStrategy" }
								]
									
								metricAggregationStrategies:
								[
								 	{ instanceOf = "TestMetricAggregationStrategy" }
								]
								allowHierarchyAggregation = true
							}
						}
					}
					
					p3:
					{
						period:
						{
							kind = "relative"
							type = "minute"
							amount = 10
						}
						cyclePeriodCount = 10
						
						componentTypes:
						{
							name1:
							{
								instanceOf = "NameComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "Gauge"
										fields:
										[
										 	{ instanceOf = "StandardFields" },
										 	{ 
										 		instanceOf = "AnomalyFields"
									 			name = "anomaly(std.avg)"
								 				baseRepresentation = "default"
							 					baseField = "std.avg"
								 			},
								 			{ 
										 		instanceOf = "ForecastFields"
									 			name = "forecast(std.count)"
								 				baseRepresentation = "default"
							 					baseField = "std.count"
								 			}
										]
										representations:
										{
											"default":
											{
												fields:
												[
												 	{ instanceOf = "StandardRepresentation" },
												 	{ instanceOf = "AnomalyRepresentation" name = "anomaly(std.avg)"},
												 	{ instanceOf = "ForecastRepresentation" name = "forecast(std.count)"}
												]
											}
										}
									}
								
									metricType2:
									{
										instanceOf = "AnomalyIndex"
									    minAnomalyMetricCount = 1
									}
									
									metricType3:
									{
										instanceOf = "ExpressionIndex"
										representations:
										{
											"default" = "metric('metricType1.std.avg') + metric('metricType1.anomaly(std.avg).score')"
										}
									}
										
									metricType4:
									{
										instanceOf = "ExpressionIndex"
										stored = true
										representations:
										{
											"default" = "metric('metricType3')"
										}
									}
								}
								
								scopeAggregationStrategies:
								[
								 	{ instanceOf = "TestScopeAggregationStrategy" }
								]
									
								metricAggregationStrategies:
								[
								 	{ instanceOf = "TestMetricAggregationStrategy" }
								]
								
								allowHierarchyAggregation = true
								allowTransferDerived = true
							}
						}
					}
					
					p4:
					{
						period:
						{
							kind = "relative"
							type = "hour"
							amount = 1
						}
						cyclePeriodCount = 10
						parentDomain = "testDomain"
						componentTypes:
						{
							name1:
							{
								instanceOf = "NameComponentType"
								hasLog = true
								metricTypes:
								{
									metricType1:
									{
										instanceOf = "Gauge"
										fields:
										[
										 	{ instanceOf = "StandardFields" },
										 	{ 
										 		instanceOf = "AnomalyFields"
									 			name = "anomaly(std.avg)"
								 				baseRepresentation = "default"
							 					baseField = "std.avg"
								 			},
								 			{ 
										 		instanceOf = "ForecastFields"
									 			name = "forecast(std.count)"
								 				baseRepresentation = "default"
							 					baseField = "std.count"
								 			}
										]
										representations:
										{
											"default":
											{
												fields:
												[
												 	{ instanceOf = "StandardRepresentation" },
												 	{ instanceOf = "AnomalyRepresentation" name = "anomaly(std.avg)"},
												 	{ instanceOf = "ForecastRepresentation" name = "forecast(std.count)"}
												]
											}
										}
									}
								
									metricType2:
									{
										instanceOf = "AnomalyIndex"
									    minAnomalyMetricCount = 1
									}
									
									metricType3:
									{
										instanceOf = "ExpressionIndex"
										representations:
										{
											"default" = "metric('metricType1.std.avg') + metric('metricType1.anomaly(std.avg).score')"
										}
									}
									
									metricType4:
									{
										instanceOf = "ExpressionIndex"
										stored = true
										representations:
										{
											"default" = "metric('metricType3')"
										}
									}
								}
								allowHierarchyAggregation = true
							}
						}
					}
				}
			}
		}
	}
}	