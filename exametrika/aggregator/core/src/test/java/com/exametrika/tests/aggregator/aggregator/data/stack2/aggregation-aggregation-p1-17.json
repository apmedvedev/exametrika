{
    "period 0": 
    {
        "<root>": 
        {
            "id": "4@aggregation-aggregation-p1-17/data-17.dt[0]",
            "scope": "",
            "metric": "",
            "nodes": 
            [
                {
                    "id": "22@aggregation-aggregation-p1-17/data-17.dt[0]",
                    "scope": "scopes.scope1",
                    "metric": "",
                    "componentType": "stackRoot",
                    "measurements": 
                    [
                        {
                            "metricType1": 
                            {
                                "inherent": 
                                {
                                    "std.count": 10,
                                    "std.sum": 40,
                                    "std.min": 1,
                                    "std.max": 20,
                                    "std.avg": 4,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                },
                                "total": 
                                {
                                    "std.count": 10,
                                    "std.sum": 1000,
                                    "std.min": 20,
                                    "std.max": 30,
                                    "std.avg": 100,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                }
                            },
                            "metricType2": "error"
                        },
                        {
                            "metricType1": 
                            {
                                "inherent": 
                                {
                                    "std.count": 10,
                                    "std.sum": 40,
                                    "std.min": 1,
                                    "std.max": 20,
                                    "std.avg": 4,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                },
                                "total": 
                                {
                                    "std.count": 10,
                                    "std.sum": 1000,
                                    "std.min": 20,
                                    "std.max": 30,
                                    "std.avg": 100,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                }
                            },
                            "metricType2": "error"
                        },
                        {
                            "metricType1": 
                            {
                                "inherent": 
                                {
                                    "std.count": 10,
                                    "std.sum": 40,
                                    "std.min": 1,
                                    "std.max": 20,
                                    "std.avg": 4,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                },
                                "total": 
                                {
                                    "std.count": 10,
                                    "std.sum": 1000,
                                    "std.min": 20,
                                    "std.max": 30,
                                    "std.avg": 100,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                }
                            },
                            "metricType2": "error"
                        },
                        {
                            "metricType1": 
                            {
                                "inherent": 
                                {
                                    "std.count": 10,
                                    "std.sum": 40,
                                    "std.min": 1,
                                    "std.max": 20,
                                    "std.avg": 4,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                },
                                "total": 
                                {
                                    "std.count": 10,
                                    "std.sum": 1000,
                                    "std.min": 20,
                                    "std.max": 30,
                                    "std.avg": 100,
                                    "anomaly(std.avg).score": 0.5,
                                    "anomaly(std.avg).level": "error",
                                    "anomaly(std.avg).primary": true,
                                    "forecast(std.count).score": 0.5,
                                    "forecast(std.count).level": "error",
                                    "forecast(std.count).primary": true
                                }
                            },
                            "metricType2": "error"
                        }
                    ],
                    "metadata": 
                    {
                        "key": "value-1.1"
                    },
                    "children": 
                    [
                        {
                            "id": "42@aggregation-aggregation-p1-17/data-17.dt[0]",
                            "scope": "scopes.scope1",
                            "metric": "metric1",
                            "componentType": "stack",
                            "measurements": 
                            [
                                {
                                    "metricType1": 
                                    {
                                        "inherent": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 50,
                                            "std.min": 1,
                                            "std.max": 30,
                                            "std.avg": 2.5,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        },
                                        "total": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 500,
                                            "std.min": 10,
                                            "std.max": 20,
                                            "std.avg": 25,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        }
                                    },
                                    "metricType2": "error"
                                },
                                {
                                    "metricType1": 
                                    {
                                        "inherent": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 50,
                                            "std.min": 1,
                                            "std.max": 30,
                                            "std.avg": 2.5,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        },
                                        "total": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 500,
                                            "std.min": 10,
                                            "std.max": 20,
                                            "std.avg": 25,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        }
                                    },
                                    "metricType2": "error"
                                },
                                {
                                    "metricType1": 
                                    {
                                        "inherent": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 50,
                                            "std.min": 1,
                                            "std.max": 30,
                                            "std.avg": 2.5,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        },
                                        "total": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 500,
                                            "std.min": 10,
                                            "std.max": 20,
                                            "std.avg": 25,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        }
                                    },
                                    "metricType2": "error"
                                },
                                {
                                    "metricType1": 
                                    {
                                        "inherent": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 50,
                                            "std.min": 1,
                                            "std.max": 30,
                                            "std.avg": 2.5,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        },
                                        "total": 
                                        {
                                            "std.count": 20,
                                            "std.sum": 500,
                                            "std.min": 10,
                                            "std.max": 20,
                                            "std.avg": 25,
                                            "anomaly(std.avg).score": 0.5,
                                            "anomaly(std.avg).level": "error",
                                            "anomaly(std.avg).primary": true,
                                            "forecast(std.count).score": 0.5,
                                            "forecast(std.count).level": "error",
                                            "forecast(std.count).primary": true
                                        }
                                    },
                                    "metricType2": "error"
                                }
                            ],
                            "metadata": 
                            {
                                "key": "value-1.2",
                                "parent": "stackRoot"
                            },
                            "children": 
                            [
                                {
                                    "id": "54@aggregation-aggregation-p1-17/data-17.dt[0]",
                                    "scope": "scopes.scope1",
                                    "metric": "metric1⟶metric2",
                                    "componentType": "stack",
                                    "measurements": 
                                    [
                                        {
                                            "metricType1": 
                                            {
                                                "inherent": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 60,
                                                    "std.min": 2,
                                                    "std.max": 40,
                                                    "std.avg": 2,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                },
                                                "total": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 250,
                                                    "std.min": 5,
                                                    "std.max": 25,
                                                    "std.avg": 8.333,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                }
                                            },
                                            "metricType2": "error"
                                        },
                                        {
                                            "metricType1": 
                                            {
                                                "inherent": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 60,
                                                    "std.min": 2,
                                                    "std.max": 40,
                                                    "std.avg": 2,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                },
                                                "total": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 250,
                                                    "std.min": 5,
                                                    "std.max": 25,
                                                    "std.avg": 8.333,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                }
                                            },
                                            "metricType2": "error"
                                        },
                                        {
                                            "metricType1": 
                                            {
                                                "inherent": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 60,
                                                    "std.min": 2,
                                                    "std.max": 40,
                                                    "std.avg": 2,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                },
                                                "total": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 250,
                                                    "std.min": 5,
                                                    "std.max": 25,
                                                    "std.avg": 8.333,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                }
                                            },
                                            "metricType2": "error"
                                        },
                                        {
                                            "metricType1": 
                                            {
                                                "inherent": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 60,
                                                    "std.min": 2,
                                                    "std.max": 40,
                                                    "std.avg": 2,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                },
                                                "total": 
                                                {
                                                    "std.count": 30,
                                                    "std.sum": 250,
                                                    "std.min": 5,
                                                    "std.max": 25,
                                                    "std.avg": 8.333,
                                                    "anomaly(std.avg).score": 0.5,
                                                    "anomaly(std.avg).level": "error",
                                                    "anomaly(std.avg).primary": true,
                                                    "forecast(std.count).score": 0.5,
                                                    "forecast(std.count).level": "error",
                                                    "forecast(std.count).primary": true
                                                }
                                            },
                                            "metricType2": "error"
                                        }
                                    ],
                                    "metadata": 
                                    {
                                        "key": "value-1.3",
                                        "parent": "stack"
                                    },
                                    "children": 
                                    [
                                        {
                                            "id": "66@aggregation-aggregation-p1-17/data-17.dt[0]",
                                            "scope": "scopes.scope1",
                                            "metric": "metric1⟶metric2⟶exit",
                                            "componentType": "stackExit",
                                            "measurements": 
                                            [
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 10,
                                                            "std.sum": 10,
                                                            "std.min": 1,
                                                            "std.max": 10,
                                                            "std.avg": 1,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                }
                                            ],
                                            "metadata": 
                                            {
                                                "key": "value-1.4",
                                                "parent": "stack"
                                            }
                                        },
                                        {
                                            "id": "78@aggregation-aggregation-p1-17/data-17.dt[0]",
                                            "scope": "scopes.scope1",
                                            "metric": "metric1⟶metric2⟶metric1",
                                            "componentType": "stack",
                                            "measurements": 
                                            [
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                },
                                                {
                                                    "metricType1": 
                                                    {
                                                        "inherent": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        },
                                                        "total": 
                                                        {
                                                            "std.count": 100,
                                                            "std.sum": 200,
                                                            "std.min": 1,
                                                            "std.max": 20,
                                                            "std.avg": 2,
                                                            "anomaly(std.avg).score": 0.5,
                                                            "anomaly(std.avg).level": "error",
                                                            "anomaly(std.avg).primary": true,
                                                            "forecast(std.count).score": 0.5,
                                                            "forecast(std.count).level": "error",
                                                            "forecast(std.count).primary": true
                                                        }
                                                    },
                                                    "metricType2": "error"
                                                }
                                            ],
                                            "metadata": 
                                            {
                                                "key": "value-1.5",
                                                "parent": "stack"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "logs": 
                    [
                        {
                            "id": "90@aggregation-aggregation-p1-17/data-17.dt[0]",
                            "scope": "scopes.scope1",
                            "metric": "",
                            "componentType": "stackLog",
                            "measurements": 
                            [
                                {
                                    "stackLog": "testLog1"
                                },
                                {
                                    "stackLog": "testLog2"
                                },
                                {
                                    "stackLog": "testLog3"
                                },
                                {
                                    "stackLog": "testLog1"
                                },
                                {
                                    "stackLog": "testLog2"
                                },
                                {
                                    "stackLog": "testLog3"
                                },
                                {
                                    "stackLog": "testLog1"
                                },
                                {
                                    "stackLog": "testLog2"
                                },
                                {
                                    "stackLog": "testLog3"
                                },
                                {
                                    "stackLog": "testLog1"
                                },
                                {
                                    "stackLog": "testLog2"
                                },
                                {
                                    "stackLog": "testLog3"
                                }
                            ],
                            "metadata": 
                            {
                                "key": "value-1.6"
                            }
                        },
                        {
                            "id": "96@aggregation-aggregation-p1-17/data-17.dt[0]",
                            "scope": "scopes.scope1",
                            "metric": "",
                            "componentType": "stackError",
                            "measurements": 
                            [
                                {
                                    "stackError": 
                                    {
                                        "exception": 
                                        {
                                            "class": "TestException1",
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "class1",
                                                    "method": "method1"
                                                },
                                                {
                                                    "class": "class2",
                                                    "method": "method2"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "stackError": 
                                    {
                                        "stackTrace": 
                                        [
                                            {
                                                "class": "testClass1",
                                                "method": "testMethod1"
                                            },
                                            {
                                                "class": "testClass2",
                                                "method": "testMethod2"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "stackError": 
                                    {
                                        "exception": 
                                        {
                                            "class": "TestException1",
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "class1",
                                                    "method": "method1"
                                                },
                                                {
                                                    "class": "class2",
                                                    "method": "method2"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "stackError": 
                                    {
                                        "stackTrace": 
                                        [
                                            {
                                                "class": "testClass1",
                                                "method": "testMethod1"
                                            },
                                            {
                                                "class": "testClass2",
                                                "method": "testMethod2"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "stackError": 
                                    {
                                        "exception": 
                                        {
                                            "class": "TestException1",
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "class1",
                                                    "method": "method1"
                                                },
                                                {
                                                    "class": "class2",
                                                    "method": "method2"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "stackError": 
                                    {
                                        "stackTrace": 
                                        [
                                            {
                                                "class": "testClass1",
                                                "method": "testMethod1"
                                            },
                                            {
                                                "class": "testClass2",
                                                "method": "testMethod2"
                                            }
                                        ]
                                    }
                                },
                                {
                                    "stackError": 
                                    {
                                        "exception": 
                                        {
                                            "class": "TestException1",
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "class1",
                                                    "method": "method1"
                                                },
                                                {
                                                    "class": "class2",
                                                    "method": "method2"
                                                }
                                            ]
                                        }
                                    }
                                },
                                {
                                    "stackError": 
                                    {
                                        "stackTrace": 
                                        [
                                            {
                                                "class": "testClass1",
                                                "method": "testMethod1"
                                            },
                                            {
                                                "class": "testClass2",
                                                "method": "testMethod2"
                                            }
                                        ]
                                    }
                                }
                            ],
                            "metadata": 
                            {
                                "key": "value-1.7"
                            }
                        }
                    ]
                }
            ]
        },
        "<orphaned>": 
        []
    }
}