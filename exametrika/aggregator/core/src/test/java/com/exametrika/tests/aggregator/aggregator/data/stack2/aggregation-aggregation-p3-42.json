{
    "cyclePeriod ": 
    {
        "<root>": 
        {
            "id": "3@aggregation-aggregation-p3-42/data-43.cy[cycle]",
            "scope": "",
            "metric": ""
        },
        "<orphaned>": 
        [
            {
                "id": "21@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "",
                "componentType": "stackRoot",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 80,
                                "std.min": 1,
                                "std.max": 20,
                                "std.avg": 4,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 2000,
                                "std.min": 20,
                                "std.max": 30,
                                "std.avg": 100,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    },
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 80,
                                "std.min": 1,
                                "std.max": 20,
                                "std.avg": 4,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 2000,
                                "std.min": 20,
                                "std.max": 30,
                                "std.avg": 100,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.1"
                }
            },
            {
                "id": "26@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "metric1⟶metric2⟶exit",
                "componentType": "stackExit",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    },
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.4",
                    "parent": "stack"
                }
            },
            {
                "id": "31@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "",
                "componentType": "stackLog",
                "measurements": 
                [
                    {
                        "stackLog": "testLog1"
                    },
                    {
                        "stackLog": "testLog2"
                    },
                    {
                        "stackLog": "testLog3"
                    },
                    {
                        "stackLog": "testLog1"
                    },
                    {
                        "stackLog": "testLog2"
                    },
                    {
                        "stackLog": "testLog3"
                    },
                    {
                        "stackLog": "testLog1"
                    },
                    {
                        "stackLog": "testLog2"
                    },
                    {
                        "stackLog": "testLog3"
                    },
                    {
                        "stackLog": "testLog1"
                    },
                    {
                        "stackLog": "testLog2"
                    },
                    {
                        "stackLog": "testLog3"
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.6"
                }
            },
            {
                "id": "36@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "",
                "componentType": "stackError",
                "measurements": 
                [
                    {
                        "stackError": 
                        {
                            "exception": 
                            {
                                "class": "TestException1",
                                "stackTrace": 
                                [
                                    {
                                        "class": "class1",
                                        "method": "method1"
                                    },
                                    {
                                        "class": "class2",
                                        "method": "method2"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "stackError": 
                        {
                            "stackTrace": 
                            [
                                {
                                    "class": "testClass1",
                                    "method": "testMethod1"
                                },
                                {
                                    "class": "testClass2",
                                    "method": "testMethod2"
                                }
                            ]
                        }
                    },
                    {
                        "stackError": 
                        {
                            "exception": 
                            {
                                "class": "TestException1",
                                "stackTrace": 
                                [
                                    {
                                        "class": "class1",
                                        "method": "method1"
                                    },
                                    {
                                        "class": "class2",
                                        "method": "method2"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "stackError": 
                        {
                            "stackTrace": 
                            [
                                {
                                    "class": "testClass1",
                                    "method": "testMethod1"
                                },
                                {
                                    "class": "testClass2",
                                    "method": "testMethod2"
                                }
                            ]
                        }
                    },
                    {
                        "stackError": 
                        {
                            "exception": 
                            {
                                "class": "TestException1",
                                "stackTrace": 
                                [
                                    {
                                        "class": "class1",
                                        "method": "method1"
                                    },
                                    {
                                        "class": "class2",
                                        "method": "method2"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "stackError": 
                        {
                            "stackTrace": 
                            [
                                {
                                    "class": "testClass1",
                                    "method": "testMethod1"
                                },
                                {
                                    "class": "testClass2",
                                    "method": "testMethod2"
                                }
                            ]
                        }
                    },
                    {
                        "stackError": 
                        {
                            "exception": 
                            {
                                "class": "TestException1",
                                "stackTrace": 
                                [
                                    {
                                        "class": "class1",
                                        "method": "method1"
                                    },
                                    {
                                        "class": "class2",
                                        "method": "method2"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "stackError": 
                        {
                            "stackTrace": 
                            [
                                {
                                    "class": "testClass1",
                                    "method": "testMethod1"
                                },
                                {
                                    "class": "testClass2",
                                    "method": "testMethod2"
                                }
                            ]
                        }
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.7"
                }
            },
            {
                "id": "41@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "stackError.TestException1&.unknown",
                "componentType": "stackErrorName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    }
                ],
                "metadata": 
                {
                    "main": "stackRoot"
                }
            },
            {
                "id": "46@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "stackError&.testClass1.testMethod1",
                "componentType": "stackErrorName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    }
                ],
                "metadata": 
                {
                    "main": "stackRoot"
                }
            },
            {
                "id": "51@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "stackError",
                "componentType": "stackErrorName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    }
                ]
            },
            {
                "id": "56@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "stackError.TestException1&",
                "componentType": "stackErrorName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    }
                ]
            },
            {
                "id": "61@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "stackError.TestException1&.unknown",
                "componentType": "stackErrorName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    }
                ]
            },
            {
                "id": "66@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "stackError",
                "componentType": "stackErrorName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    }
                ]
            },
            {
                "id": "71@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "stackError.TestException1&",
                "componentType": "stackErrorName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    }
                ]
            },
            {
                "id": "76@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "stackError&",
                "componentType": "stackErrorName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    }
                ]
            },
            {
                "id": "81@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "stackError&.testClass1",
                "componentType": "stackErrorName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    }
                ]
            },
            {
                "id": "86@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "stackError&.testClass1.testMethod1",
                "componentType": "stackErrorName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    }
                ]
            },
            {
                "id": "91@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "stackError&",
                "componentType": "stackErrorName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    }
                ]
            },
            {
                "id": "96@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "stackError&.testClass1",
                "componentType": "stackErrorName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    }
                ]
            },
            {
                "id": "101@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "",
                "componentType": "stackRoot",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 80,
                                "std.min": 1,
                                "std.max": 20,
                                "std.avg": 4,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 2000,
                                "std.min": 20,
                                "std.max": 30,
                                "std.avg": 100,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    },
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 80,
                                "std.min": 1,
                                "std.max": 20,
                                "std.avg": 4,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 2000,
                                "std.min": 20,
                                "std.max": 30,
                                "std.avg": 100,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.1"
                }
            },
            {
                "id": "106@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "metric1⟶metric2⟶exit",
                "componentType": "stackExit",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    },
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.4",
                    "parent": "stack"
                }
            },
            {
                "id": "111@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "",
                "componentType": "stackLog",
                "measurements": 
                [
                    {
                        "stackLog": "testLog1"
                    },
                    {
                        "stackLog": "testLog2"
                    },
                    {
                        "stackLog": "testLog3"
                    },
                    {
                        "stackLog": "testLog1"
                    },
                    {
                        "stackLog": "testLog2"
                    },
                    {
                        "stackLog": "testLog3"
                    },
                    {
                        "stackLog": "testLog1"
                    },
                    {
                        "stackLog": "testLog2"
                    },
                    {
                        "stackLog": "testLog3"
                    },
                    {
                        "stackLog": "testLog1"
                    },
                    {
                        "stackLog": "testLog2"
                    },
                    {
                        "stackLog": "testLog3"
                    }
                ]
            },
            {
                "id": "116@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "",
                "componentType": "stackError",
                "measurements": 
                [
                    {
                        "stackError": 
                        {
                            "exception": 
                            {
                                "class": "TestException1",
                                "stackTrace": 
                                [
                                    {
                                        "class": "class1",
                                        "method": "method1"
                                    },
                                    {
                                        "class": "class2",
                                        "method": "method2"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "stackError": 
                        {
                            "stackTrace": 
                            [
                                {
                                    "class": "testClass1",
                                    "method": "testMethod1"
                                },
                                {
                                    "class": "testClass2",
                                    "method": "testMethod2"
                                }
                            ]
                        }
                    },
                    {
                        "stackError": 
                        {
                            "exception": 
                            {
                                "class": "TestException1",
                                "stackTrace": 
                                [
                                    {
                                        "class": "class1",
                                        "method": "method1"
                                    },
                                    {
                                        "class": "class2",
                                        "method": "method2"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "stackError": 
                        {
                            "stackTrace": 
                            [
                                {
                                    "class": "testClass1",
                                    "method": "testMethod1"
                                },
                                {
                                    "class": "testClass2",
                                    "method": "testMethod2"
                                }
                            ]
                        }
                    },
                    {
                        "stackError": 
                        {
                            "exception": 
                            {
                                "class": "TestException1",
                                "stackTrace": 
                                [
                                    {
                                        "class": "class1",
                                        "method": "method1"
                                    },
                                    {
                                        "class": "class2",
                                        "method": "method2"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "stackError": 
                        {
                            "stackTrace": 
                            [
                                {
                                    "class": "testClass1",
                                    "method": "testMethod1"
                                },
                                {
                                    "class": "testClass2",
                                    "method": "testMethod2"
                                }
                            ]
                        }
                    },
                    {
                        "stackError": 
                        {
                            "exception": 
                            {
                                "class": "TestException1",
                                "stackTrace": 
                                [
                                    {
                                        "class": "class1",
                                        "method": "method1"
                                    },
                                    {
                                        "class": "class2",
                                        "method": "method2"
                                    }
                                ]
                            }
                        }
                    },
                    {
                        "stackError": 
                        {
                            "stackTrace": 
                            [
                                {
                                    "class": "testClass1",
                                    "method": "testMethod1"
                                },
                                {
                                    "class": "testClass2",
                                    "method": "testMethod2"
                                }
                            ]
                        }
                    }
                ]
            },
            {
                "id": "121@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "",
                "componentType": "stackName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 80,
                                "std.min": 1,
                                "std.max": 20,
                                "std.avg": 4,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 2000,
                                "std.min": 20,
                                "std.max": 30,
                                "std.avg": 100,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    },
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 80,
                                "std.min": 1,
                                "std.max": 20,
                                "std.avg": 4,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 2000,
                                "std.min": 20,
                                "std.max": 30,
                                "std.avg": 100,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.1"
                }
            },
            {
                "id": "126@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "",
                "componentType": "stackName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 80,
                                "std.min": 1,
                                "std.max": 20,
                                "std.avg": 4,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 2000,
                                "std.min": 20,
                                "std.max": 30,
                                "std.avg": 100,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    },
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 80,
                                "std.min": 1,
                                "std.max": 20,
                                "std.avg": 4,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 2000,
                                "std.min": 20,
                                "std.max": 30,
                                "std.avg": 100,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.1"
                }
            },
            {
                "id": "131@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "metric1",
                "componentType": "stackName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 240,
                                "std.sum": 500,
                                "std.min": 1,
                                "std.max": 30,
                                "std.avg": 2.083,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 40,
                                "std.sum": 1000,
                                "std.min": 10,
                                "std.max": 20,
                                "std.avg": 25,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    },
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 240,
                                "std.sum": 500,
                                "std.min": 1,
                                "std.max": 30,
                                "std.avg": 2.083,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 40,
                                "std.sum": 1000,
                                "std.min": 10,
                                "std.max": 20,
                                "std.avg": 25,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.5",
                    "parent": "stack"
                }
            },
            {
                "id": "136@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "metric1",
                "componentType": "stackName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 240,
                                "std.sum": 500,
                                "std.min": 1,
                                "std.max": 30,
                                "std.avg": 2.083,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 40,
                                "std.sum": 1000,
                                "std.min": 10,
                                "std.max": 20,
                                "std.avg": 25,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    },
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 240,
                                "std.sum": 500,
                                "std.min": 1,
                                "std.max": 30,
                                "std.avg": 2.083,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 40,
                                "std.sum": 1000,
                                "std.min": 10,
                                "std.max": 20,
                                "std.avg": 25,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.5",
                    "parent": "stack"
                }
            },
            {
                "id": "141@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "metric2",
                "componentType": "stackName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 60,
                                "std.sum": 120,
                                "std.min": 2,
                                "std.max": 40,
                                "std.avg": 2,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 60,
                                "std.sum": 500,
                                "std.min": 5,
                                "std.max": 25,
                                "std.avg": 8.333,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    },
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 60,
                                "std.sum": 120,
                                "std.min": 2,
                                "std.max": 40,
                                "std.avg": 2,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 60,
                                "std.sum": 500,
                                "std.min": 5,
                                "std.max": 25,
                                "std.avg": 8.333,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.3",
                    "parent": "stack"
                }
            },
            {
                "id": "146@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "metric2",
                "componentType": "stackName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 60,
                                "std.sum": 120,
                                "std.min": 2,
                                "std.max": 40,
                                "std.avg": 2,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 60,
                                "std.sum": 500,
                                "std.min": 5,
                                "std.max": 25,
                                "std.avg": 8.333,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    },
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 60,
                                "std.sum": 120,
                                "std.min": 2,
                                "std.max": 40,
                                "std.avg": 2,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 60,
                                "std.sum": 500,
                                "std.min": 5,
                                "std.max": 25,
                                "std.avg": 8.333,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.3",
                    "parent": "stack"
                }
            },
            {
                "id": "151@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "exit",
                "componentType": "stackName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    },
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.4",
                    "parent": "stack"
                }
            },
            {
                "id": "156@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "exit",
                "componentType": "stackName",
                "measurements": 
                [
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    },
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true
                            }
                        },
                        "metricType2": "error"
                    }
                ],
                "metadata": 
                {
                    "key": "value-1.4",
                    "parent": "stack"
                }
            },
            {
                "id": "161@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes.scope1",
                "metric": "",
                "componentType": "anomaliesLog",
                "measurements": 
                [
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 1,
                            "metricId": 0,
                            "componentType": "stackRoot",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 1,
                            "metricId": 3,
                            "componentType": "stack",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 1,
                            "metricId": 5,
                            "componentType": "stack",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 1,
                            "metricId": 7,
                            "componentType": "stackExit",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 1,
                            "metricId": 8,
                            "componentType": "stack",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 1,
                            "metricId": 0,
                            "componentType": "stackRoot",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 1,
                            "metricId": 3,
                            "componentType": "stack",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 1,
                            "metricId": 5,
                            "componentType": "stack",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 1,
                            "metricId": 7,
                            "componentType": "stackExit",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 1,
                            "metricId": 8,
                            "componentType": "stack",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    }
                ]
            },
            {
                "id": "166@aggregation-aggregation-p3-42/data-43.cy[cycle]",
                "scope": "scopes",
                "metric": "",
                "componentType": "anomaliesLog",
                "measurements": 
                [
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 15,
                            "metricId": 0,
                            "componentType": "stackRoot",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 15,
                            "metricId": 3,
                            "componentType": "stack",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 15,
                            "metricId": 5,
                            "componentType": "stack",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 15,
                            "metricId": 7,
                            "componentType": "stackExit",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 15,
                            "metricId": 8,
                            "componentType": "stack",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 15,
                            "metricId": 0,
                            "componentType": "stackRoot",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 15,
                            "metricId": 3,
                            "componentType": "stack",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 15,
                            "metricId": 5,
                            "componentType": "stack",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 15,
                            "metricId": 7,
                            "componentType": "stackExit",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    },
                    {
                        "anomaliesLog": 
                        {
                            "scopeId": 15,
                            "metricId": 8,
                            "componentType": "stack",
                            "causes": 
                            ["metricType1.anomaly(std.avg)"]
                        }
                    }
                ]
            }
        ]
    },
    "period 0": 
    {
        "<root>": 
        {
            "id": "6@aggregation-aggregation-p3-42/data-42.dt[0]",
            "scope": "",
            "metric": "",
            "nodes": 
            [
                {
                    "id": "181@aggregation-aggregation-p3-42/data-42.dt[0]",
                    "scope": "scopes",
                    "metric": "stackError",
                    "componentType": "stackErrorName",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    "metricChildren": 
                    [
                        {
                            "id": "197@aggregation-aggregation-p3-42/data-42.dt[0]",
                            "scope": "scopes",
                            "metric": "stackError.TestException1&",
                            "componentType": "stackErrorName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "std.count": 2,
                                    "std.sum": 2,
                                    "std.min": 1,
                                    "std.max": 1,
                                    "std.avg": 1
                                }
                            },
                            "metricChildren": 
                            [
                                {
                                    "id": "213@aggregation-aggregation-p3-42/data-42.dt[0]",
                                    "scope": "scopes",
                                    "metric": "stackError.TestException1&.unknown",
                                    "componentType": "stackErrorName",
                                    "flags": "[derived]",
                                    "measurements": 
                                    {
                                        "metricType1": 
                                        {
                                            "std.count": 2,
                                            "std.sum": 2,
                                            "std.min": 1,
                                            "std.max": 1,
                                            "std.avg": 1
                                        }
                                    },
                                    "scopeChildren": 
                                    ["scope:scopes.scope1, location:stackError.TestException1&.unknown (149@aggregation-aggregation-p3-42/data-42.dt[0])"]
                                }
                            ],
                            "scopeChildren": 
                            ["scope:scopes.scope1, location:stackError.TestException1& (245@aggregation-aggregation-p3-42/data-42.dt[0])"]
                        }
                    ],
                    "scopeChildren": 
                    [
                        {
                            "id": "229@aggregation-aggregation-p3-42/data-42.dt[0]",
                            "scope": "scopes.scope1",
                            "metric": "stackError",
                            "componentType": "stackErrorName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "std.count": 2,
                                    "std.sum": 2,
                                    "std.min": 1,
                                    "std.max": 1,
                                    "std.avg": 1
                                }
                            },
                            "metricChildren": 
                            [
                                {
                                    "id": "245@aggregation-aggregation-p3-42/data-42.dt[0]",
                                    "scope": "scopes.scope1",
                                    "metric": "stackError.TestException1&",
                                    "componentType": "stackErrorName",
                                    "flags": "[derived]",
                                    "measurements": 
                                    {
                                        "metricType1": 
                                        {
                                            "std.count": 2,
                                            "std.sum": 2,
                                            "std.min": 1,
                                            "std.max": 1,
                                            "std.avg": 1
                                        }
                                    },
                                    "metricChildren": 
                                    [
                                        {
                                            "id": "149@aggregation-aggregation-p3-42/data-42.dt[0]",
                                            "scope": "scopes.scope1",
                                            "metric": "stackError.TestException1&.unknown",
                                            "componentType": "stackErrorName",
                                            "flags": "[derived]",
                                            "measurements": 
                                            {
                                                "metricType1": 
                                                {
                                                    "std.count": 2,
                                                    "std.sum": 2,
                                                    "std.min": 1,
                                                    "std.max": 1,
                                                    "std.avg": 1
                                                }
                                            },
                                            "metadata": 
                                            {
                                                "main": "stackRoot"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": "261@aggregation-aggregation-p3-42/data-42.dt[0]",
                    "scope": "scopes",
                    "metric": "stackError&",
                    "componentType": "stackErrorName",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    "metricChildren": 
                    [
                        {
                            "id": "277@aggregation-aggregation-p3-42/data-42.dt[0]",
                            "scope": "scopes",
                            "metric": "stackError&.testClass1",
                            "componentType": "stackErrorName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "std.count": 2,
                                    "std.sum": 2,
                                    "std.min": 1,
                                    "std.max": 1,
                                    "std.avg": 1
                                }
                            },
                            "metricChildren": 
                            [
                                {
                                    "id": "293@aggregation-aggregation-p3-42/data-42.dt[0]",
                                    "scope": "scopes",
                                    "metric": "stackError&.testClass1.testMethod1",
                                    "componentType": "stackErrorName",
                                    "flags": "[derived]",
                                    "measurements": 
                                    {
                                        "metricType1": 
                                        {
                                            "std.count": 2,
                                            "std.sum": 2,
                                            "std.min": 1,
                                            "std.max": 1,
                                            "std.avg": 1
                                        }
                                    },
                                    "scopeChildren": 
                                    ["scope:scopes.scope1, location:stackError&.testClass1.testMethod1 (165@aggregation-aggregation-p3-42/data-42.dt[0])"]
                                }
                            ],
                            "scopeChildren": 
                            ["scope:scopes.scope1, location:stackError&.testClass1 (325@aggregation-aggregation-p3-42/data-42.dt[0])"]
                        }
                    ],
                    "scopeChildren": 
                    [
                        {
                            "id": "309@aggregation-aggregation-p3-42/data-42.dt[0]",
                            "scope": "scopes.scope1",
                            "metric": "stackError&",
                            "componentType": "stackErrorName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "std.count": 2,
                                    "std.sum": 2,
                                    "std.min": 1,
                                    "std.max": 1,
                                    "std.avg": 1
                                }
                            },
                            "metricChildren": 
                            [
                                {
                                    "id": "325@aggregation-aggregation-p3-42/data-42.dt[0]",
                                    "scope": "scopes.scope1",
                                    "metric": "stackError&.testClass1",
                                    "componentType": "stackErrorName",
                                    "flags": "[derived]",
                                    "measurements": 
                                    {
                                        "metricType1": 
                                        {
                                            "std.count": 2,
                                            "std.sum": 2,
                                            "std.min": 1,
                                            "std.max": 1,
                                            "std.avg": 1
                                        }
                                    },
                                    "metricChildren": 
                                    [
                                        {
                                            "id": "165@aggregation-aggregation-p3-42/data-42.dt[0]",
                                            "scope": "scopes.scope1",
                                            "metric": "stackError&.testClass1.testMethod1",
                                            "componentType": "stackErrorName",
                                            "flags": "[derived]",
                                            "measurements": 
                                            {
                                                "metricType1": 
                                                {
                                                    "std.count": 2,
                                                    "std.sum": 2,
                                                    "std.min": 1,
                                                    "std.max": 1,
                                                    "std.avg": 1
                                                }
                                            },
                                            "metadata": 
                                            {
                                                "main": "stackRoot"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": "341@aggregation-aggregation-p3-42/data-42.dt[0]",
                    "scope": "scopes",
                    "metric": "",
                    "componentType": "stackRoot",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 80,
                                "std.min": 1,
                                "std.max": 20,
                                "std.avg": 4,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    }
                                ]
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 2000,
                                "std.min": 20,
                                "std.max": 30,
                                "std.avg": 100,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    }
                                ]
                            }
                        },
                        "metricType2": "error"
                    },
                    "metadata": 
                    {
                        "key": "value-1.1"
                    },
                    "children": 
                    [
                        {
                            "id": "363@aggregation-aggregation-p3-42/data-42.dt[0]",
                            "scope": "scopes",
                            "metric": "metric1",
                            "componentType": "stack",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "inherent": 
                                    {
                                        "std.count": 40,
                                        "std.sum": 100,
                                        "std.min": 1,
                                        "std.max": 30,
                                        "std.avg": 2.5,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            }
                                        ]
                                    },
                                    "total": 
                                    {
                                        "std.count": 40,
                                        "std.sum": 1000,
                                        "std.min": 10,
                                        "std.max": 20,
                                        "std.avg": 25,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            }
                                        ]
                                    }
                                },
                                "metricType2": "error"
                            },
                            "metadata": 
                            {
                                "key": "value-1.2",
                                "parent": "stackRoot"
                            },
                            "children": 
                            [
                                {
                                    "id": "376@aggregation-aggregation-p3-42/data-42.dt[0]",
                                    "scope": "scopes",
                                    "metric": "metric1⟶metric2",
                                    "componentType": "stack",
                                    "flags": "[derived]",
                                    "measurements": 
                                    {
                                        "metricType1": 
                                        {
                                            "inherent": 
                                            {
                                                "std.count": 60,
                                                "std.sum": 120,
                                                "std.min": 2,
                                                "std.max": 40,
                                                "std.avg": 2,
                                                "anomaly(std.avg).score": 0.5,
                                                "anomaly(std.avg).level": "error",
                                                "anomaly(std.avg).primary": true,
                                                "forecast(std.count).score": 0.5,
                                                "forecast(std.count).level": "error",
                                                "forecast(std.count).primary": true,
                                                "forecast(std.count).predictions": 
                                                [
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    }
                                                ]
                                            },
                                            "total": 
                                            {
                                                "std.count": 60,
                                                "std.sum": 500,
                                                "std.min": 5,
                                                "std.max": 25,
                                                "std.avg": 8.333,
                                                "anomaly(std.avg).score": 0.5,
                                                "anomaly(std.avg).level": "error",
                                                "anomaly(std.avg).primary": true,
                                                "forecast(std.count).score": 0.5,
                                                "forecast(std.count).level": "error",
                                                "forecast(std.count).primary": true,
                                                "forecast(std.count).predictions": 
                                                [
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    }
                                                ]
                                            }
                                        },
                                        "metricType2": "error"
                                    },
                                    "metadata": 
                                    {
                                        "key": "value-1.3",
                                        "parent": "stack"
                                    },
                                    "children": 
                                    [
                                        {
                                            "id": "389@aggregation-aggregation-p3-42/data-42.dt[0]",
                                            "scope": "scopes",
                                            "metric": "metric1⟶metric2⟶exit",
                                            "componentType": "stackExit",
                                            "flags": "[derived]",
                                            "measurements": 
                                            {
                                                "metricType1": 
                                                {
                                                    "inherent": 
                                                    {
                                                        "std.count": 20,
                                                        "std.sum": 20,
                                                        "std.min": 1,
                                                        "std.max": 10,
                                                        "std.avg": 1,
                                                        "anomaly(std.avg).score": 0.5,
                                                        "anomaly(std.avg).level": "error",
                                                        "anomaly(std.avg).primary": true,
                                                        "forecast(std.count).score": 0.5,
                                                        "forecast(std.count).level": "error",
                                                        "forecast(std.count).primary": true,
                                                        "forecast(std.count).predictions": 
                                                        [
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            }
                                                        ]
                                                    },
                                                    "total": 
                                                    {
                                                        "std.count": 20,
                                                        "std.sum": 20,
                                                        "std.min": 1,
                                                        "std.max": 10,
                                                        "std.avg": 1,
                                                        "anomaly(std.avg).score": 0.5,
                                                        "anomaly(std.avg).level": "error",
                                                        "anomaly(std.avg).primary": true,
                                                        "forecast(std.count).score": 0.5,
                                                        "forecast(std.count).level": "error",
                                                        "forecast(std.count).primary": true,
                                                        "forecast(std.count).predictions": 
                                                        [
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            }
                                                        ]
                                                    }
                                                },
                                                "metricType2": "error"
                                            },
                                            "metadata": 
                                            {
                                                "key": "value-1.4",
                                                "parent": "stack"
                                            }
                                        },
                                        {
                                            "id": "402@aggregation-aggregation-p3-42/data-42.dt[0]",
                                            "scope": "scopes",
                                            "metric": "metric1⟶metric2⟶metric1",
                                            "componentType": "stack",
                                            "flags": "[derived]",
                                            "measurements": 
                                            {
                                                "metricType1": 
                                                {
                                                    "inherent": 
                                                    {
                                                        "std.count": 200,
                                                        "std.sum": 400,
                                                        "std.min": 1,
                                                        "std.max": 20,
                                                        "std.avg": 2,
                                                        "anomaly(std.avg).score": 0.5,
                                                        "anomaly(std.avg).level": "error",
                                                        "anomaly(std.avg).primary": true,
                                                        "forecast(std.count).score": 0.5,
                                                        "forecast(std.count).level": "error",
                                                        "forecast(std.count).primary": true,
                                                        "forecast(std.count).predictions": 
                                                        [
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            }
                                                        ]
                                                    },
                                                    "total": 
                                                    {
                                                        "std.count": 200,
                                                        "std.sum": 400,
                                                        "std.min": 1,
                                                        "std.max": 20,
                                                        "std.avg": 2,
                                                        "anomaly(std.avg).score": 0.5,
                                                        "anomaly(std.avg).level": "error",
                                                        "anomaly(std.avg).primary": true,
                                                        "forecast(std.count).score": 0.5,
                                                        "forecast(std.count).level": "error",
                                                        "forecast(std.count).primary": true,
                                                        "forecast(std.count).predictions": 
                                                        [
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            }
                                                        ]
                                                    }
                                                },
                                                "metricType2": "error"
                                            },
                                            "metadata": 
                                            {
                                                "key": "value-1.5",
                                                "parent": "stack"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "logs": 
                    [
                        {
                            "id": "415@aggregation-aggregation-p3-42/data-42.dt[0]",
                            "scope": "scopes",
                            "metric": "",
                            "componentType": "stackLog",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "stackLog": ""
                            },
                            "metadata": 
                            {
                                "key": "value-1.6"
                            }
                        },
                        {
                            "id": "423@aggregation-aggregation-p3-42/data-42.dt[0]",
                            "scope": "scopes",
                            "metric": "",
                            "componentType": "stackError",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "stackError": ""
                            },
                            "metadata": 
                            {
                                "key": "value-1.7"
                            }
                        }
                    ],
                    "anomalies": 
                    {
                        "id": "568@aggregation-aggregation-p3-42/data-42.dt[0]",
                        "scope": "scopes",
                        "metric": "",
                        "componentType": "anomaliesLog",
                        "measurements": 
                        {
                            "anomaliesLog": ""
                        }
                    },
                    "scopeChildren": 
                    [
                        {
                            "id": "23@aggregation-aggregation-p3-42/data-42.dt[0]",
                            "scope": "scopes.scope1",
                            "metric": "",
                            "componentType": "stackRoot",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "inherent": 
                                    {
                                        "std.count": 20,
                                        "std.sum": 80,
                                        "std.min": 1,
                                        "std.max": 20,
                                        "std.avg": 4,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            }
                                        ]
                                    },
                                    "total": 
                                    {
                                        "std.count": 20,
                                        "std.sum": 2000,
                                        "std.min": 20,
                                        "std.max": 30,
                                        "std.avg": 100,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            }
                                        ]
                                    }
                                },
                                "metricType2": "error"
                            },
                            "metadata": 
                            {
                                "key": "value-1.1"
                            },
                            "dependents": 
                            ["aggregation.aggregation.p3.stackName@447[inherent,total]"],
                            "children": 
                            [
                                {
                                    "id": "45@aggregation-aggregation-p3-42/data-42.dt[0]",
                                    "scope": "scopes.scope1",
                                    "metric": "metric1",
                                    "componentType": "stack",
                                    "measurements": 
                                    {
                                        "metricType1": 
                                        {
                                            "inherent": 
                                            {
                                                "std.count": 40,
                                                "std.sum": 100,
                                                "std.min": 1,
                                                "std.max": 30,
                                                "std.avg": 2.5,
                                                "anomaly(std.avg).score": 0.5,
                                                "anomaly(std.avg).level": "error",
                                                "anomaly(std.avg).primary": true,
                                                "forecast(std.count).score": 0.5,
                                                "forecast(std.count).level": "error",
                                                "forecast(std.count).primary": true,
                                                "forecast(std.count).predictions": 
                                                [
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    }
                                                ]
                                            },
                                            "total": 
                                            {
                                                "std.count": 40,
                                                "std.sum": 1000,
                                                "std.min": 10,
                                                "std.max": 20,
                                                "std.avg": 25,
                                                "anomaly(std.avg).score": 0.5,
                                                "anomaly(std.avg).level": "error",
                                                "anomaly(std.avg).primary": true,
                                                "forecast(std.count).score": 0.5,
                                                "forecast(std.count).level": "error",
                                                "forecast(std.count).primary": true,
                                                "forecast(std.count).predictions": 
                                                [
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    }
                                                ]
                                            }
                                        },
                                        "metricType2": "error"
                                    },
                                    "metadata": 
                                    {
                                        "key": "value-1.2",
                                        "parent": "stackRoot"
                                    },
                                    "dependents": 
                                    ["aggregation.aggregation.p3.stackName@479[inherent,total]"],
                                    "children": 
                                    [
                                        {
                                            "id": "58@aggregation-aggregation-p3-42/data-42.dt[0]",
                                            "scope": "scopes.scope1",
                                            "metric": "metric1⟶metric2",
                                            "componentType": "stack",
                                            "measurements": 
                                            {
                                                "metricType1": 
                                                {
                                                    "inherent": 
                                                    {
                                                        "std.count": 60,
                                                        "std.sum": 120,
                                                        "std.min": 2,
                                                        "std.max": 40,
                                                        "std.avg": 2,
                                                        "anomaly(std.avg).score": 0.5,
                                                        "anomaly(std.avg).level": "error",
                                                        "anomaly(std.avg).primary": true,
                                                        "forecast(std.count).score": 0.5,
                                                        "forecast(std.count).level": "error",
                                                        "forecast(std.count).primary": true,
                                                        "forecast(std.count).predictions": 
                                                        [
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            }
                                                        ]
                                                    },
                                                    "total": 
                                                    {
                                                        "std.count": 60,
                                                        "std.sum": 500,
                                                        "std.min": 5,
                                                        "std.max": 25,
                                                        "std.avg": 8.333,
                                                        "anomaly(std.avg).score": 0.5,
                                                        "anomaly(std.avg).level": "error",
                                                        "anomaly(std.avg).primary": true,
                                                        "forecast(std.count).score": 0.5,
                                                        "forecast(std.count).level": "error",
                                                        "forecast(std.count).primary": true,
                                                        "forecast(std.count).predictions": 
                                                        [
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            }
                                                        ]
                                                    }
                                                },
                                                "metricType2": "error"
                                            },
                                            "metadata": 
                                            {
                                                "key": "value-1.3",
                                                "parent": "stack"
                                            },
                                            "dependents": 
                                            ["aggregation.aggregation.p3.stackName@512[inherent,total]"],
                                            "children": 
                                            [
                                                {
                                                    "id": "71@aggregation-aggregation-p3-42/data-42.dt[0]",
                                                    "scope": "scopes.scope1",
                                                    "metric": "metric1⟶metric2⟶exit",
                                                    "componentType": "stackExit",
                                                    "measurements": 
                                                    {
                                                        "metricType1": 
                                                        {
                                                            "inherent": 
                                                            {
                                                                "std.count": 20,
                                                                "std.sum": 20,
                                                                "std.min": 1,
                                                                "std.max": 10,
                                                                "std.avg": 1,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true,
                                                                "forecast(std.count).predictions": 
                                                                [
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    }
                                                                ]
                                                            },
                                                            "total": 
                                                            {
                                                                "std.count": 20,
                                                                "std.sum": 20,
                                                                "std.min": 1,
                                                                "std.max": 10,
                                                                "std.avg": 1,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true,
                                                                "forecast(std.count).predictions": 
                                                                [
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        "metricType2": "error"
                                                    },
                                                    "metadata": 
                                                    {
                                                        "key": "value-1.4",
                                                        "parent": "stack"
                                                    },
                                                    "dependents": 
                                                    ["aggregation.aggregation.p3.stackName@544[inherent,total]"]
                                                },
                                                {
                                                    "id": "84@aggregation-aggregation-p3-42/data-42.dt[0]",
                                                    "scope": "scopes.scope1",
                                                    "metric": "metric1⟶metric2⟶metric1",
                                                    "componentType": "stack",
                                                    "measurements": 
                                                    {
                                                        "metricType1": 
                                                        {
                                                            "inherent": 
                                                            {
                                                                "std.count": 200,
                                                                "std.sum": 400,
                                                                "std.min": 1,
                                                                "std.max": 20,
                                                                "std.avg": 2,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true,
                                                                "forecast(std.count).predictions": 
                                                                [
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    }
                                                                ]
                                                            },
                                                            "total": 
                                                            {
                                                                "std.count": 200,
                                                                "std.sum": 400,
                                                                "std.min": 1,
                                                                "std.max": 20,
                                                                "std.avg": 2,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true,
                                                                "forecast(std.count).predictions": 
                                                                [
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        "metricType2": "error"
                                                    },
                                                    "metadata": 
                                                    {
                                                        "key": "value-1.5",
                                                        "parent": "stack"
                                                    },
                                                    "dependents": 
                                                    ["aggregation.aggregation.p3.stackName@479[inherent]"]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "logs": 
                            [
                                {
                                    "id": "97@aggregation-aggregation-p3-42/data-42.dt[0]",
                                    "scope": "scopes.scope1",
                                    "metric": "",
                                    "componentType": "stackLog",
                                    "measurements": 
                                    {
                                        "stackLog": "testLog3"
                                    },
                                    "metadata": 
                                    {
                                        "key": "value-1.6"
                                    }
                                },
                                {
                                    "id": "105@aggregation-aggregation-p3-42/data-42.dt[0]",
                                    "scope": "scopes.scope1",
                                    "metric": "",
                                    "componentType": "stackError",
                                    "measurements": 
                                    {
                                        "stackError": 
                                        {
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "testClass1",
                                                    "method": "testMethod1"
                                                },
                                                {
                                                    "class": "testClass2",
                                                    "method": "testMethod2"
                                                }
                                            ]
                                        }
                                    },
                                    "metadata": 
                                    {
                                        "key": "value-1.7"
                                    }
                                }
                            ],
                            "anomalies": 
                            {
                                "id": "560@aggregation-aggregation-p3-42/data-42.dt[0]",
                                "scope": "scopes.scope1",
                                "metric": "",
                                "componentType": "anomaliesLog",
                                "measurements": 
                                {
                                    "anomaliesLog": 
                                    {
                                        "scopeId": 1,
                                        "metricId": 8,
                                        "componentType": "stack",
                                        "causes": 
                                        ["metricType1.anomaly(std.avg)"]
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "id": "431@aggregation-aggregation-p3-42/data-42.dt[0]",
                    "scope": "scopes",
                    "metric": "",
                    "componentType": "stackName",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 80,
                                "std.min": 1,
                                "std.max": 20,
                                "std.avg": 4,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    }
                                ]
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 2000,
                                "std.min": 20,
                                "std.max": 30,
                                "std.avg": 100,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    }
                                ]
                            }
                        },
                        "metricType2": "error"
                    },
                    "metadata": 
                    {
                        "key": "value-1.1"
                    },
                    "scopeChildren": 
                    [
                        {
                            "id": "447@aggregation-aggregation-p3-42/data-42.dt[0]",
                            "scope": "scopes.scope1",
                            "metric": "",
                            "componentType": "stackName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "inherent": 
                                    {
                                        "std.count": 20,
                                        "std.sum": 80,
                                        "std.min": 1,
                                        "std.max": 20,
                                        "std.avg": 4,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            }
                                        ]
                                    },
                                    "total": 
                                    {
                                        "std.count": 20,
                                        "std.sum": 2000,
                                        "std.min": 20,
                                        "std.max": 30,
                                        "std.avg": 100,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            }
                                        ]
                                    }
                                },
                                "metricType2": "error"
                            },
                            "metadata": 
                            {
                                "key": "value-1.1"
                            },
                            "dependencies": 
                            ["aggregation.aggregation.p3.stackRoot@23[inherent,total]"]
                        }
                    ]
                },
                {
                    "id": "463@aggregation-aggregation-p3-42/data-42.dt[0]",
                    "scope": "scopes",
                    "metric": "metric1",
                    "componentType": "stackName",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 240,
                                "std.sum": 500,
                                "std.min": 1,
                                "std.max": 30,
                                "std.avg": 2.083,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    }
                                ]
                            },
                            "total": 
                            {
                                "std.count": 40,
                                "std.sum": 1000,
                                "std.min": 10,
                                "std.max": 20,
                                "std.avg": 25,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    }
                                ]
                            }
                        },
                        "metricType2": "error"
                    },
                    "metadata": 
                    {
                        "key": "value-1.5",
                        "parent": "stack"
                    },
                    "scopeChildren": 
                    [
                        {
                            "id": "479@aggregation-aggregation-p3-42/data-42.dt[0]",
                            "scope": "scopes.scope1",
                            "metric": "metric1",
                            "componentType": "stackName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "inherent": 
                                    {
                                        "std.count": 240,
                                        "std.sum": 500,
                                        "std.min": 1,
                                        "std.max": 30,
                                        "std.avg": 2.083,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            }
                                        ]
                                    },
                                    "total": 
                                    {
                                        "std.count": 40,
                                        "std.sum": 1000,
                                        "std.min": 10,
                                        "std.max": 20,
                                        "std.avg": 25,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            }
                                        ]
                                    }
                                },
                                "metricType2": "error"
                            },
                            "metadata": 
                            {
                                "key": "value-1.5",
                                "parent": "stack"
                            },
                            "dependencies": 
                            ["aggregation.aggregation.p3.stack@45[inherent,total]", "aggregation.aggregation.p3.stack@84[inherent]"]
                        }
                    ]
                },
                {
                    "id": "495@aggregation-aggregation-p3-42/data-42.dt[0]",
                    "scope": "scopes",
                    "metric": "metric2",
                    "componentType": "stackName",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 60,
                                "std.sum": 120,
                                "std.min": 2,
                                "std.max": 40,
                                "std.avg": 2,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    }
                                ]
                            },
                            "total": 
                            {
                                "std.count": 60,
                                "std.sum": 500,
                                "std.min": 5,
                                "std.max": 25,
                                "std.avg": 8.333,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    }
                                ]
                            }
                        },
                        "metricType2": "error"
                    },
                    "metadata": 
                    {
                        "key": "value-1.3",
                        "parent": "stack"
                    },
                    "scopeChildren": 
                    [
                        {
                            "id": "512@aggregation-aggregation-p3-42/data-42.dt[0]",
                            "scope": "scopes.scope1",
                            "metric": "metric2",
                            "componentType": "stackName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "inherent": 
                                    {
                                        "std.count": 60,
                                        "std.sum": 120,
                                        "std.min": 2,
                                        "std.max": 40,
                                        "std.avg": 2,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            }
                                        ]
                                    },
                                    "total": 
                                    {
                                        "std.count": 60,
                                        "std.sum": 500,
                                        "std.min": 5,
                                        "std.max": 25,
                                        "std.avg": 8.333,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            }
                                        ]
                                    }
                                },
                                "metricType2": "error"
                            },
                            "metadata": 
                            {
                                "key": "value-1.3",
                                "parent": "stack"
                            },
                            "dependencies": 
                            ["aggregation.aggregation.p3.stack@58[inherent,total]"]
                        }
                    ]
                },
                {
                    "id": "528@aggregation-aggregation-p3-42/data-42.dt[0]",
                    "scope": "scopes",
                    "metric": "exit",
                    "componentType": "stackName",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    }
                                ]
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    }
                                ]
                            }
                        },
                        "metricType2": "error"
                    },
                    "metadata": 
                    {
                        "key": "value-1.4",
                        "parent": "stack"
                    },
                    "scopeChildren": 
                    [
                        {
                            "id": "544@aggregation-aggregation-p3-42/data-42.dt[0]",
                            "scope": "scopes.scope1",
                            "metric": "exit",
                            "componentType": "stackName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "inherent": 
                                    {
                                        "std.count": 20,
                                        "std.sum": 20,
                                        "std.min": 1,
                                        "std.max": 10,
                                        "std.avg": 1,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            }
                                        ]
                                    },
                                    "total": 
                                    {
                                        "std.count": 20,
                                        "std.sum": 20,
                                        "std.min": 1,
                                        "std.max": 10,
                                        "std.avg": 1,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            }
                                        ]
                                    }
                                },
                                "metricType2": "error"
                            },
                            "metadata": 
                            {
                                "key": "value-1.4",
                                "parent": "stack"
                            },
                            "dependencies": 
                            ["aggregation.aggregation.p3.stackExit@71[inherent,total]"]
                        }
                    ]
                }
            ]
        },
        "<orphaned>": 
        []
    },
    "period 1": 
    {
        "<root>": 
        {
            "id": "719@aggregation-aggregation-p3-42/data-42.dt[1]",
            "scope": "",
            "metric": "",
            "nodes": 
            [
                {
                    "id": "894@aggregation-aggregation-p3-42/data-42.dt[1]",
                    "scope": "scopes",
                    "metric": "stackError",
                    "componentType": "stackErrorName",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    "metricChildren": 
                    [
                        {
                            "id": "910@aggregation-aggregation-p3-42/data-42.dt[1]",
                            "scope": "scopes",
                            "metric": "stackError.TestException1&",
                            "componentType": "stackErrorName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "std.count": 2,
                                    "std.sum": 2,
                                    "std.min": 1,
                                    "std.max": 1,
                                    "std.avg": 1
                                }
                            },
                            "metricChildren": 
                            [
                                {
                                    "id": "926@aggregation-aggregation-p3-42/data-42.dt[1]",
                                    "scope": "scopes",
                                    "metric": "stackError.TestException1&.unknown",
                                    "componentType": "stackErrorName",
                                    "flags": "[derived]",
                                    "measurements": 
                                    {
                                        "metricType1": 
                                        {
                                            "std.count": 2,
                                            "std.sum": 2,
                                            "std.min": 1,
                                            "std.max": 1,
                                            "std.avg": 1
                                        }
                                    },
                                    "scopeChildren": 
                                    ["scope:scopes.scope1, location:stackError.TestException1&.unknown (862@aggregation-aggregation-p3-42/data-42.dt[1])"]
                                }
                            ],
                            "scopeChildren": 
                            ["scope:scopes.scope1, location:stackError.TestException1& (958@aggregation-aggregation-p3-42/data-42.dt[1])"]
                        }
                    ],
                    "scopeChildren": 
                    [
                        {
                            "id": "942@aggregation-aggregation-p3-42/data-42.dt[1]",
                            "scope": "scopes.scope1",
                            "metric": "stackError",
                            "componentType": "stackErrorName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "std.count": 2,
                                    "std.sum": 2,
                                    "std.min": 1,
                                    "std.max": 1,
                                    "std.avg": 1
                                }
                            },
                            "metricChildren": 
                            [
                                {
                                    "id": "958@aggregation-aggregation-p3-42/data-42.dt[1]",
                                    "scope": "scopes.scope1",
                                    "metric": "stackError.TestException1&",
                                    "componentType": "stackErrorName",
                                    "flags": "[derived]",
                                    "measurements": 
                                    {
                                        "metricType1": 
                                        {
                                            "std.count": 2,
                                            "std.sum": 2,
                                            "std.min": 1,
                                            "std.max": 1,
                                            "std.avg": 1
                                        }
                                    },
                                    "metricChildren": 
                                    [
                                        {
                                            "id": "862@aggregation-aggregation-p3-42/data-42.dt[1]",
                                            "scope": "scopes.scope1",
                                            "metric": "stackError.TestException1&.unknown",
                                            "componentType": "stackErrorName",
                                            "flags": "[derived]",
                                            "measurements": 
                                            {
                                                "metricType1": 
                                                {
                                                    "std.count": 2,
                                                    "std.sum": 2,
                                                    "std.min": 1,
                                                    "std.max": 1,
                                                    "std.avg": 1
                                                }
                                            },
                                            "metadata": 
                                            {
                                                "main": "stackRoot"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": "974@aggregation-aggregation-p3-42/data-42.dt[1]",
                    "scope": "scopes",
                    "metric": "stackError&",
                    "componentType": "stackErrorName",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "std.count": 2,
                            "std.sum": 2,
                            "std.min": 1,
                            "std.max": 1,
                            "std.avg": 1
                        }
                    },
                    "metricChildren": 
                    [
                        {
                            "id": "990@aggregation-aggregation-p3-42/data-42.dt[1]",
                            "scope": "scopes",
                            "metric": "stackError&.testClass1",
                            "componentType": "stackErrorName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "std.count": 2,
                                    "std.sum": 2,
                                    "std.min": 1,
                                    "std.max": 1,
                                    "std.avg": 1
                                }
                            },
                            "metricChildren": 
                            [
                                {
                                    "id": "1006@aggregation-aggregation-p3-42/data-42.dt[1]",
                                    "scope": "scopes",
                                    "metric": "stackError&.testClass1.testMethod1",
                                    "componentType": "stackErrorName",
                                    "flags": "[derived]",
                                    "measurements": 
                                    {
                                        "metricType1": 
                                        {
                                            "std.count": 2,
                                            "std.sum": 2,
                                            "std.min": 1,
                                            "std.max": 1,
                                            "std.avg": 1
                                        }
                                    },
                                    "scopeChildren": 
                                    ["scope:scopes.scope1, location:stackError&.testClass1.testMethod1 (878@aggregation-aggregation-p3-42/data-42.dt[1])"]
                                }
                            ],
                            "scopeChildren": 
                            ["scope:scopes.scope1, location:stackError&.testClass1 (1040@aggregation-aggregation-p3-42/data-42.dt[1])"]
                        }
                    ],
                    "scopeChildren": 
                    [
                        {
                            "id": "1024@aggregation-aggregation-p3-42/data-42.dt[1]",
                            "scope": "scopes.scope1",
                            "metric": "stackError&",
                            "componentType": "stackErrorName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "std.count": 2,
                                    "std.sum": 2,
                                    "std.min": 1,
                                    "std.max": 1,
                                    "std.avg": 1
                                }
                            },
                            "metricChildren": 
                            [
                                {
                                    "id": "1040@aggregation-aggregation-p3-42/data-42.dt[1]",
                                    "scope": "scopes.scope1",
                                    "metric": "stackError&.testClass1",
                                    "componentType": "stackErrorName",
                                    "flags": "[derived]",
                                    "measurements": 
                                    {
                                        "metricType1": 
                                        {
                                            "std.count": 2,
                                            "std.sum": 2,
                                            "std.min": 1,
                                            "std.max": 1,
                                            "std.avg": 1
                                        }
                                    },
                                    "metricChildren": 
                                    [
                                        {
                                            "id": "878@aggregation-aggregation-p3-42/data-42.dt[1]",
                                            "scope": "scopes.scope1",
                                            "metric": "stackError&.testClass1.testMethod1",
                                            "componentType": "stackErrorName",
                                            "flags": "[derived]",
                                            "measurements": 
                                            {
                                                "metricType1": 
                                                {
                                                    "std.count": 2,
                                                    "std.sum": 2,
                                                    "std.min": 1,
                                                    "std.max": 1,
                                                    "std.avg": 1
                                                }
                                            },
                                            "metadata": 
                                            {
                                                "main": "stackRoot"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                {
                    "id": "1056@aggregation-aggregation-p3-42/data-42.dt[1]",
                    "scope": "scopes",
                    "metric": "",
                    "componentType": "stackRoot",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 80,
                                "std.min": 1,
                                "std.max": 20,
                                "std.avg": 4,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    }
                                ]
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 2000,
                                "std.min": 20,
                                "std.max": 30,
                                "std.avg": 100,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    }
                                ]
                            }
                        },
                        "metricType2": "error"
                    },
                    "metadata": 
                    {
                        "key": "value-1.1"
                    },
                    "children": 
                    [
                        {
                            "id": "1078@aggregation-aggregation-p3-42/data-42.dt[1]",
                            "scope": "scopes",
                            "metric": "metric1",
                            "componentType": "stack",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "inherent": 
                                    {
                                        "std.count": 40,
                                        "std.sum": 100,
                                        "std.min": 1,
                                        "std.max": 30,
                                        "std.avg": 2.5,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            }
                                        ]
                                    },
                                    "total": 
                                    {
                                        "std.count": 40,
                                        "std.sum": 1000,
                                        "std.min": 10,
                                        "std.max": 20,
                                        "std.avg": 25,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            }
                                        ]
                                    }
                                },
                                "metricType2": "error"
                            },
                            "metadata": 
                            {
                                "key": "value-1.2",
                                "parent": "stackRoot"
                            },
                            "children": 
                            [
                                {
                                    "id": "1091@aggregation-aggregation-p3-42/data-42.dt[1]",
                                    "scope": "scopes",
                                    "metric": "metric1⟶metric2",
                                    "componentType": "stack",
                                    "flags": "[derived]",
                                    "measurements": 
                                    {
                                        "metricType1": 
                                        {
                                            "inherent": 
                                            {
                                                "std.count": 60,
                                                "std.sum": 120,
                                                "std.min": 2,
                                                "std.max": 40,
                                                "std.avg": 2,
                                                "anomaly(std.avg).score": 0.5,
                                                "anomaly(std.avg).level": "error",
                                                "anomaly(std.avg).primary": true,
                                                "forecast(std.count).score": 0.5,
                                                "forecast(std.count).level": "error",
                                                "forecast(std.count).primary": true,
                                                "forecast(std.count).predictions": 
                                                [
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    }
                                                ]
                                            },
                                            "total": 
                                            {
                                                "std.count": 60,
                                                "std.sum": 500,
                                                "std.min": 5,
                                                "std.max": 25,
                                                "std.avg": 8.333,
                                                "anomaly(std.avg).score": 0.5,
                                                "anomaly(std.avg).level": "error",
                                                "anomaly(std.avg).primary": true,
                                                "forecast(std.count).score": 0.5,
                                                "forecast(std.count).level": "error",
                                                "forecast(std.count).primary": true,
                                                "forecast(std.count).predictions": 
                                                [
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    },
                                                    {
                                                        "value": 60
                                                    }
                                                ]
                                            }
                                        },
                                        "metricType2": "error"
                                    },
                                    "metadata": 
                                    {
                                        "key": "value-1.3",
                                        "parent": "stack"
                                    },
                                    "children": 
                                    [
                                        {
                                            "id": "1104@aggregation-aggregation-p3-42/data-42.dt[1]",
                                            "scope": "scopes",
                                            "metric": "metric1⟶metric2⟶exit",
                                            "componentType": "stackExit",
                                            "flags": "[derived]",
                                            "measurements": 
                                            {
                                                "metricType1": 
                                                {
                                                    "inherent": 
                                                    {
                                                        "std.count": 20,
                                                        "std.sum": 20,
                                                        "std.min": 1,
                                                        "std.max": 10,
                                                        "std.avg": 1,
                                                        "anomaly(std.avg).score": 0.5,
                                                        "anomaly(std.avg).level": "error",
                                                        "anomaly(std.avg).primary": true,
                                                        "forecast(std.count).score": 0.5,
                                                        "forecast(std.count).level": "error",
                                                        "forecast(std.count).primary": true,
                                                        "forecast(std.count).predictions": 
                                                        [
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            }
                                                        ]
                                                    },
                                                    "total": 
                                                    {
                                                        "std.count": 20,
                                                        "std.sum": 20,
                                                        "std.min": 1,
                                                        "std.max": 10,
                                                        "std.avg": 1,
                                                        "anomaly(std.avg).score": 0.5,
                                                        "anomaly(std.avg).level": "error",
                                                        "anomaly(std.avg).primary": true,
                                                        "forecast(std.count).score": 0.5,
                                                        "forecast(std.count).level": "error",
                                                        "forecast(std.count).primary": true,
                                                        "forecast(std.count).predictions": 
                                                        [
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            },
                                                            {
                                                                "value": 20
                                                            }
                                                        ]
                                                    }
                                                },
                                                "metricType2": "error"
                                            },
                                            "metadata": 
                                            {
                                                "key": "value-1.4",
                                                "parent": "stack"
                                            }
                                        },
                                        {
                                            "id": "1117@aggregation-aggregation-p3-42/data-42.dt[1]",
                                            "scope": "scopes",
                                            "metric": "metric1⟶metric2⟶metric1",
                                            "componentType": "stack",
                                            "flags": "[derived]",
                                            "measurements": 
                                            {
                                                "metricType1": 
                                                {
                                                    "inherent": 
                                                    {
                                                        "std.count": 200,
                                                        "std.sum": 400,
                                                        "std.min": 1,
                                                        "std.max": 20,
                                                        "std.avg": 2,
                                                        "anomaly(std.avg).score": 0.5,
                                                        "anomaly(std.avg).level": "error",
                                                        "anomaly(std.avg).primary": true,
                                                        "forecast(std.count).score": 0.5,
                                                        "forecast(std.count).level": "error",
                                                        "forecast(std.count).primary": true,
                                                        "forecast(std.count).predictions": 
                                                        [
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            }
                                                        ]
                                                    },
                                                    "total": 
                                                    {
                                                        "std.count": 200,
                                                        "std.sum": 400,
                                                        "std.min": 1,
                                                        "std.max": 20,
                                                        "std.avg": 2,
                                                        "anomaly(std.avg).score": 0.5,
                                                        "anomaly(std.avg).level": "error",
                                                        "anomaly(std.avg).primary": true,
                                                        "forecast(std.count).score": 0.5,
                                                        "forecast(std.count).level": "error",
                                                        "forecast(std.count).primary": true,
                                                        "forecast(std.count).predictions": 
                                                        [
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            },
                                                            {
                                                                "value": 200
                                                            }
                                                        ]
                                                    }
                                                },
                                                "metricType2": "error"
                                            },
                                            "metadata": 
                                            {
                                                "key": "value-1.5",
                                                "parent": "stack"
                                            }
                                        }
                                    ]
                                }
                            ]
                        }
                    ],
                    "logs": 
                    [
                        {
                            "id": "1130@aggregation-aggregation-p3-42/data-42.dt[1]",
                            "scope": "scopes",
                            "metric": "",
                            "componentType": "stackLog",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "stackLog": ""
                            },
                            "metadata": 
                            {
                                "key": "value-1.6"
                            }
                        },
                        {
                            "id": "1138@aggregation-aggregation-p3-42/data-42.dt[1]",
                            "scope": "scopes",
                            "metric": "",
                            "componentType": "stackError",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "stackError": ""
                            },
                            "metadata": 
                            {
                                "key": "value-1.7"
                            }
                        }
                    ],
                    "anomalies": 
                    {
                        "id": "1282@aggregation-aggregation-p3-42/data-42.dt[1]",
                        "scope": "scopes",
                        "metric": "",
                        "componentType": "anomaliesLog",
                        "measurements": 
                        {
                            "anomaliesLog": ""
                        }
                    },
                    "scopeChildren": 
                    [
                        {
                            "id": "736@aggregation-aggregation-p3-42/data-42.dt[1]",
                            "scope": "scopes.scope1",
                            "metric": "",
                            "componentType": "stackRoot",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "inherent": 
                                    {
                                        "std.count": 20,
                                        "std.sum": 80,
                                        "std.min": 1,
                                        "std.max": 20,
                                        "std.avg": 4,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            }
                                        ]
                                    },
                                    "total": 
                                    {
                                        "std.count": 20,
                                        "std.sum": 2000,
                                        "std.min": 20,
                                        "std.max": 30,
                                        "std.avg": 100,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            }
                                        ]
                                    }
                                },
                                "metricType2": "error"
                            },
                            "metadata": 
                            {
                                "key": "value-1.1"
                            },
                            "dependents": 
                            ["aggregation.aggregation.p3.stackName@1162[inherent,total]"],
                            "children": 
                            [
                                {
                                    "id": "758@aggregation-aggregation-p3-42/data-42.dt[1]",
                                    "scope": "scopes.scope1",
                                    "metric": "metric1",
                                    "componentType": "stack",
                                    "measurements": 
                                    {
                                        "metricType1": 
                                        {
                                            "inherent": 
                                            {
                                                "std.count": 40,
                                                "std.sum": 100,
                                                "std.min": 1,
                                                "std.max": 30,
                                                "std.avg": 2.5,
                                                "anomaly(std.avg).score": 0.5,
                                                "anomaly(std.avg).level": "error",
                                                "anomaly(std.avg).primary": true,
                                                "forecast(std.count).score": 0.5,
                                                "forecast(std.count).level": "error",
                                                "forecast(std.count).primary": true,
                                                "forecast(std.count).predictions": 
                                                [
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    }
                                                ]
                                            },
                                            "total": 
                                            {
                                                "std.count": 40,
                                                "std.sum": 1000,
                                                "std.min": 10,
                                                "std.max": 20,
                                                "std.avg": 25,
                                                "anomaly(std.avg).score": 0.5,
                                                "anomaly(std.avg).level": "error",
                                                "anomaly(std.avg).primary": true,
                                                "forecast(std.count).score": 0.5,
                                                "forecast(std.count).level": "error",
                                                "forecast(std.count).primary": true,
                                                "forecast(std.count).predictions": 
                                                [
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    },
                                                    {
                                                        "value": 40
                                                    }
                                                ]
                                            }
                                        },
                                        "metricType2": "error"
                                    },
                                    "metadata": 
                                    {
                                        "key": "value-1.2",
                                        "parent": "stackRoot"
                                    },
                                    "dependents": 
                                    ["aggregation.aggregation.p3.stackName@1194[inherent,total]"],
                                    "children": 
                                    [
                                        {
                                            "id": "771@aggregation-aggregation-p3-42/data-42.dt[1]",
                                            "scope": "scopes.scope1",
                                            "metric": "metric1⟶metric2",
                                            "componentType": "stack",
                                            "measurements": 
                                            {
                                                "metricType1": 
                                                {
                                                    "inherent": 
                                                    {
                                                        "std.count": 60,
                                                        "std.sum": 120,
                                                        "std.min": 2,
                                                        "std.max": 40,
                                                        "std.avg": 2,
                                                        "anomaly(std.avg).score": 0.5,
                                                        "anomaly(std.avg).level": "error",
                                                        "anomaly(std.avg).primary": true,
                                                        "forecast(std.count).score": 0.5,
                                                        "forecast(std.count).level": "error",
                                                        "forecast(std.count).primary": true,
                                                        "forecast(std.count).predictions": 
                                                        [
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            }
                                                        ]
                                                    },
                                                    "total": 
                                                    {
                                                        "std.count": 60,
                                                        "std.sum": 500,
                                                        "std.min": 5,
                                                        "std.max": 25,
                                                        "std.avg": 8.333,
                                                        "anomaly(std.avg).score": 0.5,
                                                        "anomaly(std.avg).level": "error",
                                                        "anomaly(std.avg).primary": true,
                                                        "forecast(std.count).score": 0.5,
                                                        "forecast(std.count).level": "error",
                                                        "forecast(std.count).primary": true,
                                                        "forecast(std.count).predictions": 
                                                        [
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            },
                                                            {
                                                                "value": 60
                                                            }
                                                        ]
                                                    }
                                                },
                                                "metricType2": "error"
                                            },
                                            "metadata": 
                                            {
                                                "key": "value-1.3",
                                                "parent": "stack"
                                            },
                                            "dependents": 
                                            ["aggregation.aggregation.p3.stackName@1226[inherent,total]"],
                                            "children": 
                                            [
                                                {
                                                    "id": "784@aggregation-aggregation-p3-42/data-42.dt[1]",
                                                    "scope": "scopes.scope1",
                                                    "metric": "metric1⟶metric2⟶exit",
                                                    "componentType": "stackExit",
                                                    "measurements": 
                                                    {
                                                        "metricType1": 
                                                        {
                                                            "inherent": 
                                                            {
                                                                "std.count": 20,
                                                                "std.sum": 20,
                                                                "std.min": 1,
                                                                "std.max": 10,
                                                                "std.avg": 1,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true,
                                                                "forecast(std.count).predictions": 
                                                                [
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    }
                                                                ]
                                                            },
                                                            "total": 
                                                            {
                                                                "std.count": 20,
                                                                "std.sum": 20,
                                                                "std.min": 1,
                                                                "std.max": 10,
                                                                "std.avg": 1,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true,
                                                                "forecast(std.count).predictions": 
                                                                [
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    },
                                                                    {
                                                                        "value": 20
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        "metricType2": "error"
                                                    },
                                                    "metadata": 
                                                    {
                                                        "key": "value-1.4",
                                                        "parent": "stack"
                                                    },
                                                    "dependents": 
                                                    ["aggregation.aggregation.p3.stackName@1258[inherent,total]"]
                                                },
                                                {
                                                    "id": "797@aggregation-aggregation-p3-42/data-42.dt[1]",
                                                    "scope": "scopes.scope1",
                                                    "metric": "metric1⟶metric2⟶metric1",
                                                    "componentType": "stack",
                                                    "measurements": 
                                                    {
                                                        "metricType1": 
                                                        {
                                                            "inherent": 
                                                            {
                                                                "std.count": 200,
                                                                "std.sum": 400,
                                                                "std.min": 1,
                                                                "std.max": 20,
                                                                "std.avg": 2,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true,
                                                                "forecast(std.count).predictions": 
                                                                [
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    }
                                                                ]
                                                            },
                                                            "total": 
                                                            {
                                                                "std.count": 200,
                                                                "std.sum": 400,
                                                                "std.min": 1,
                                                                "std.max": 20,
                                                                "std.avg": 2,
                                                                "anomaly(std.avg).score": 0.5,
                                                                "anomaly(std.avg).level": "error",
                                                                "anomaly(std.avg).primary": true,
                                                                "forecast(std.count).score": 0.5,
                                                                "forecast(std.count).level": "error",
                                                                "forecast(std.count).primary": true,
                                                                "forecast(std.count).predictions": 
                                                                [
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    },
                                                                    {
                                                                        "value": 200
                                                                    }
                                                                ]
                                                            }
                                                        },
                                                        "metricType2": "error"
                                                    },
                                                    "metadata": 
                                                    {
                                                        "key": "value-1.5",
                                                        "parent": "stack"
                                                    },
                                                    "dependents": 
                                                    ["aggregation.aggregation.p3.stackName@1194[inherent]"]
                                                }
                                            ]
                                        }
                                    ]
                                }
                            ],
                            "logs": 
                            [
                                {
                                    "id": "810@aggregation-aggregation-p3-42/data-42.dt[1]",
                                    "scope": "scopes.scope1",
                                    "metric": "",
                                    "componentType": "stackLog",
                                    "measurements": 
                                    {
                                        "stackLog": "testLog3"
                                    },
                                    "metadata": 
                                    {
                                        "key": "value-1.6"
                                    }
                                },
                                {
                                    "id": "818@aggregation-aggregation-p3-42/data-42.dt[1]",
                                    "scope": "scopes.scope1",
                                    "metric": "",
                                    "componentType": "stackError",
                                    "measurements": 
                                    {
                                        "stackError": 
                                        {
                                            "stackTrace": 
                                            [
                                                {
                                                    "class": "testClass1",
                                                    "method": "testMethod1"
                                                },
                                                {
                                                    "class": "testClass2",
                                                    "method": "testMethod2"
                                                }
                                            ]
                                        }
                                    },
                                    "metadata": 
                                    {
                                        "key": "value-1.7"
                                    }
                                }
                            ],
                            "anomalies": 
                            {
                                "id": "1274@aggregation-aggregation-p3-42/data-42.dt[1]",
                                "scope": "scopes.scope1",
                                "metric": "",
                                "componentType": "anomaliesLog",
                                "measurements": 
                                {
                                    "anomaliesLog": 
                                    {
                                        "scopeId": 1,
                                        "metricId": 8,
                                        "componentType": "stack",
                                        "causes": 
                                        ["metricType1.anomaly(std.avg)"]
                                    }
                                }
                            }
                        }
                    ]
                },
                {
                    "id": "1146@aggregation-aggregation-p3-42/data-42.dt[1]",
                    "scope": "scopes",
                    "metric": "",
                    "componentType": "stackName",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 80,
                                "std.min": 1,
                                "std.max": 20,
                                "std.avg": 4,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    }
                                ]
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 2000,
                                "std.min": 20,
                                "std.max": 30,
                                "std.avg": 100,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    }
                                ]
                            }
                        },
                        "metricType2": "error"
                    },
                    "metadata": 
                    {
                        "key": "value-1.1"
                    },
                    "scopeChildren": 
                    [
                        {
                            "id": "1162@aggregation-aggregation-p3-42/data-42.dt[1]",
                            "scope": "scopes.scope1",
                            "metric": "",
                            "componentType": "stackName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "inherent": 
                                    {
                                        "std.count": 20,
                                        "std.sum": 80,
                                        "std.min": 1,
                                        "std.max": 20,
                                        "std.avg": 4,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            }
                                        ]
                                    },
                                    "total": 
                                    {
                                        "std.count": 20,
                                        "std.sum": 2000,
                                        "std.min": 20,
                                        "std.max": 30,
                                        "std.avg": 100,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            }
                                        ]
                                    }
                                },
                                "metricType2": "error"
                            },
                            "metadata": 
                            {
                                "key": "value-1.1"
                            },
                            "dependencies": 
                            ["aggregation.aggregation.p3.stackRoot@736[inherent,total]"]
                        }
                    ]
                },
                {
                    "id": "1178@aggregation-aggregation-p3-42/data-42.dt[1]",
                    "scope": "scopes",
                    "metric": "metric1",
                    "componentType": "stackName",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 240,
                                "std.sum": 500,
                                "std.min": 1,
                                "std.max": 30,
                                "std.avg": 2.083,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    },
                                    {
                                        "value": 240
                                    }
                                ]
                            },
                            "total": 
                            {
                                "std.count": 40,
                                "std.sum": 1000,
                                "std.min": 10,
                                "std.max": 20,
                                "std.avg": 25,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    },
                                    {
                                        "value": 40
                                    }
                                ]
                            }
                        },
                        "metricType2": "error"
                    },
                    "metadata": 
                    {
                        "key": "value-1.5",
                        "parent": "stack"
                    },
                    "scopeChildren": 
                    [
                        {
                            "id": "1194@aggregation-aggregation-p3-42/data-42.dt[1]",
                            "scope": "scopes.scope1",
                            "metric": "metric1",
                            "componentType": "stackName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "inherent": 
                                    {
                                        "std.count": 240,
                                        "std.sum": 500,
                                        "std.min": 1,
                                        "std.max": 30,
                                        "std.avg": 2.083,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            },
                                            {
                                                "value": 240
                                            }
                                        ]
                                    },
                                    "total": 
                                    {
                                        "std.count": 40,
                                        "std.sum": 1000,
                                        "std.min": 10,
                                        "std.max": 20,
                                        "std.avg": 25,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            },
                                            {
                                                "value": 40
                                            }
                                        ]
                                    }
                                },
                                "metricType2": "error"
                            },
                            "metadata": 
                            {
                                "key": "value-1.5",
                                "parent": "stack"
                            },
                            "dependencies": 
                            ["aggregation.aggregation.p3.stack@758[inherent,total]", "aggregation.aggregation.p3.stack@797[inherent]"]
                        }
                    ]
                },
                {
                    "id": "1210@aggregation-aggregation-p3-42/data-42.dt[1]",
                    "scope": "scopes",
                    "metric": "metric2",
                    "componentType": "stackName",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 60,
                                "std.sum": 120,
                                "std.min": 2,
                                "std.max": 40,
                                "std.avg": 2,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    }
                                ]
                            },
                            "total": 
                            {
                                "std.count": 60,
                                "std.sum": 500,
                                "std.min": 5,
                                "std.max": 25,
                                "std.avg": 8.333,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    },
                                    {
                                        "value": 60
                                    }
                                ]
                            }
                        },
                        "metricType2": "error"
                    },
                    "metadata": 
                    {
                        "key": "value-1.3",
                        "parent": "stack"
                    },
                    "scopeChildren": 
                    [
                        {
                            "id": "1226@aggregation-aggregation-p3-42/data-42.dt[1]",
                            "scope": "scopes.scope1",
                            "metric": "metric2",
                            "componentType": "stackName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "inherent": 
                                    {
                                        "std.count": 60,
                                        "std.sum": 120,
                                        "std.min": 2,
                                        "std.max": 40,
                                        "std.avg": 2,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            }
                                        ]
                                    },
                                    "total": 
                                    {
                                        "std.count": 60,
                                        "std.sum": 500,
                                        "std.min": 5,
                                        "std.max": 25,
                                        "std.avg": 8.333,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            },
                                            {
                                                "value": 60
                                            }
                                        ]
                                    }
                                },
                                "metricType2": "error"
                            },
                            "metadata": 
                            {
                                "key": "value-1.3",
                                "parent": "stack"
                            },
                            "dependencies": 
                            ["aggregation.aggregation.p3.stack@771[inherent,total]"]
                        }
                    ]
                },
                {
                    "id": "1242@aggregation-aggregation-p3-42/data-42.dt[1]",
                    "scope": "scopes",
                    "metric": "exit",
                    "componentType": "stackName",
                    "flags": "[derived]",
                    "measurements": 
                    {
                        "metricType1": 
                        {
                            "inherent": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    }
                                ]
                            },
                            "total": 
                            {
                                "std.count": 20,
                                "std.sum": 20,
                                "std.min": 1,
                                "std.max": 10,
                                "std.avg": 1,
                                "anomaly(std.avg).score": 0.5,
                                "anomaly(std.avg).level": "error",
                                "anomaly(std.avg).primary": true,
                                "forecast(std.count).score": 0.5,
                                "forecast(std.count).level": "error",
                                "forecast(std.count).primary": true,
                                "forecast(std.count).predictions": 
                                [
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    },
                                    {
                                        "value": 20
                                    }
                                ]
                            }
                        },
                        "metricType2": "error"
                    },
                    "metadata": 
                    {
                        "key": "value-1.4",
                        "parent": "stack"
                    },
                    "scopeChildren": 
                    [
                        {
                            "id": "1258@aggregation-aggregation-p3-42/data-42.dt[1]",
                            "scope": "scopes.scope1",
                            "metric": "exit",
                            "componentType": "stackName",
                            "flags": "[derived]",
                            "measurements": 
                            {
                                "metricType1": 
                                {
                                    "inherent": 
                                    {
                                        "std.count": 20,
                                        "std.sum": 20,
                                        "std.min": 1,
                                        "std.max": 10,
                                        "std.avg": 1,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            }
                                        ]
                                    },
                                    "total": 
                                    {
                                        "std.count": 20,
                                        "std.sum": 20,
                                        "std.min": 1,
                                        "std.max": 10,
                                        "std.avg": 1,
                                        "anomaly(std.avg).score": 0.5,
                                        "anomaly(std.avg).level": "error",
                                        "anomaly(std.avg).primary": true,
                                        "forecast(std.count).score": 0.5,
                                        "forecast(std.count).level": "error",
                                        "forecast(std.count).primary": true,
                                        "forecast(std.count).predictions": 
                                        [
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            },
                                            {
                                                "value": 20
                                            }
                                        ]
                                    }
                                },
                                "metricType2": "error"
                            },
                            "metadata": 
                            {
                                "key": "value-1.4",
                                "parent": "stack"
                            },
                            "dependencies": 
                            ["aggregation.aggregation.p3.stackExit@784[inherent,total]"]
                        }
                    ]
                }
            ]
        },
        "<orphaned>": 
        []
    }
}