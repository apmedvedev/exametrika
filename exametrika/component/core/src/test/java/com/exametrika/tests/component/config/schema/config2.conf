{	
	modules:
	{
		module2:
		{
			version = "1.0.0"
			schema:
			{
				instanceOf = "ComponentModel"
				version = 2
				periods:
				{
					p1:
					{
						period:
						{
							kind = "absolute"
							type = "second"
							amount = 10
						}
						cyclePeriodCount = 1
						nonAggregating = true
					}
				
					p2:
					{
						period:
						{
							kind = "absolute"
							type = "minute"
							amount = 10
						}
						cyclePeriodCount = 100
						parentDomain = "test"
					}
				}
				components:
				{
					component1:
					{
						instanceOf = "component"
						actions:
						{
							action1:
							{
								instanceOf = "LogAction"
							}
		
							action2:
							{
								instanceOf = "EnableMaintenanceModeAction"
							}
								
							action3:
							{
								instanceOf = "DisableMaintenanceModeAction"
							}
						}
						
						rules:
						{
							rule1:
							{
								instanceOf = "TestRule"
							}
						}
						
						jobs:
						{
							job1:
							{
								instanceOf = "OneTimeJob"
								operation:
								{
									instanceOf = "ExpressionComponentJobOperation"
									expression = "component.log('job1')"
								}
						
								schedule:
								{
									instanceOf = "StandardSchedule"
									expression = "time(10:30)"
									timeFormat = "HH:mm"
								}
							}
						
							job2:
							{
								instanceOf = "RecurrentJob"
								operation:
								{
									instanceOf = "ExpressionComponentJobOperation"
									expression = "component.log('job2')"
								}
						
								schedule:
								{
									instanceOf = "StandardSchedule"
									expression = "time(10:30)"
									timeFormat = "HH:mm"
								}
									
								period:
								{
									instanceOf = "StandardSchedulePeriod"
									type = "minute"
									kind = "absolute"
									amount = 10
								}
							}
						}
						
						alerts:
						{
							alert1:
							{
								instanceOf = "HealthAlert"
								channels:
								[
									{
										instanceOf = "MailAlertChannel"
										name = "mail"
										onTemplate = "onTemplate"
										offTemplate = "offTemplate"
										statusTemplate = "statusTemplate"
										schedule:
										{
											instanceOf = "StandardSchedule"
											expression = "time(10:30)"
											timeFormat = "HH:mm"
										}
											
										period:
										{
											instanceOf = "StandardSchedulePeriod"
											type = "minute"
											kind = "absolute"
											amount = 10
										}
										
										recipients:
										[
										 	{
										 		type = "address"
									 			name = "recipient1"
								 				address = "address1"
										 	}
										 	
										 	{
										 		type = "role"
									 			name = "recipient2"
										 	}
										 	
										 	{
										 		type = "userGroup"
									 			name = "recipient3"
										 	}
										 	
										 	{
										 		type = "user"
									 			name = "recipient4"
										 	}
										]
											
										onSubject = "onSubject"
										offSubject = "offSubject"
										statusSubject = "statusSubject"
										formatted = false
										senderName = "senderName"
										senderAddress = "senderAddress"
									}
								]
								
								tags = ["tag1", "tag2"]
								enabled = false
							}
						
							alert2:
							{
								instanceOf = "ExpressionSimpleAlert"
								channels:
								[
									{
										instanceOf = "MailAlertChannel"
										name = "mail"
										onTemplate = "onTemplate"
										recipients:
										[
										 	{
										 		type = "address"
									 			name = "recipient1"
								 				address = "address1"
										 	}
										]
											
										onSubject = "onSubject"
									}
								]
								onCondition = "onCondition"
								offCondition = "offCondition"
							}
								
							alert3:
							{
								instanceOf = "ExpressionComplexAlert"
								channels:
								[
									{
										instanceOf = "MailAlertChannel"
										name = "mail"
										onTemplate = "onTemplate"
										recipients:
										[
										 	{
										 		type = "address"
									 			name = "recipient1"
								 				address = "address1"
										 	}
										]
											
										onSubject = "onSubject"
									}
								]
								onCondition = "onCondition"
								offCondition = "offCondition"
							}
								
							alert4:
							{
								instanceOf = "TagIncidentGroup"
								channels:
								[
									{
										instanceOf = "MailAlertChannel"
										name = "mail"
										onTemplate = "onTemplate"
										recipients:
										[
										 	{
										 		type = "address"
									 			name = "recipient1"
								 				address = "address1"
										 	}
										]
											
										onSubject = "onSubject"
									}
								]
								pattern = "pattern"
							}
								
							alert5:
							{
								instanceOf = "ExpressionIncidentGroup"
								channels:
								[
									{
										instanceOf = "MailAlertChannel"
										name = "mail"
										onTemplate = "onTemplate"
										recipients:
										[
										 	{
										 		type = "address"
									 			name = "recipient1"
								 				address = "address1"
										 	}
										]
											
										onSubject = "onSubject"
									}
								]
								expression = "expression"
							}
						}
						
						groupDiscoveryStrategies:
						[
						 	{
						 		instanceOf = "PatternGroupDiscoveryStrategy"
					 			pattern = "groups.*"
				 				component = "TestGroup"
			 				    group = "groups"
						 	}
						]
					}
					
					component2:
					{
						instanceOf = "aggregationComponent"
						aggregationSchema:
						{
							p1:
							{
								test2:
								{
									instanceOf = "NameComponentType"
									metricTypes:
									{
										metricType1:
										{
											instanceOf = "Gauge"
										}
									}
									scopeAggregationStrategies = []
                                    metricAggregationStrategies = []
                                    ruleRepresentation = null
								}
							}
						
							p2:
							{
								test2:
								{
									instanceOf = "NameComponentType"
									metricTypes:
									{
										metricType1:
										{
											instanceOf = "Gauge"
										}
									}
									
									componentDiscoveryStrategies:
									[
										{
											instanceOf = "NodeDiscoveryStrategy"
										    component = "Node"
										}
										
										{
											instanceOf = "HostDiscoveryStrategy"
										    component = "Host"
										}
										
										{
											instanceOf = "TransactionDiscoveryStrategy"
										    component = "Transaction"
										}
									]
							
									componentDeletionStrategy:
									{
										instanceOf = "NodeDeletionStrategy"
									}
									
									scopeAggregationStrategies = []
                                    metricAggregationStrategies = []
                                    ruleRepresentation = null
								}
							}
						}
					}
		
					component3:
					{
						instanceOf = "agent"
						healthComponentType = "test1"
						profilerConfigurationName = "${resource.path}/profiler.conf"
						aggregationSchema:
						{
							p2:
							{
								test3:
								{
									instanceOf = "NameComponentType"
									metricTypes:
									{
										metricType1:
										{
											instanceOf = "Gauge"
										}
									}
																
									componentDeletionStrategy:
									{
										instanceOf = "HostDeletionStrategy"
									}
									
									scopeAggregationStrategies = []
                                    metricAggregationStrategies = []
                                    ruleRepresentation = null
								}
							}
						}
					}
					
					component4:
					{
						instanceOf = "host"
						healthComponentType = "test1"
						profilerConfigurationName = "${resource.path}/profiler.conf"
						aggregationSchema:
						{
							p2:
							{
								test4:
								{
									instanceOf = "NameComponentType"
									metricTypes:
									{
										metricType1:
										{
											instanceOf = "Gauge"
										}
									}
									scopeAggregationStrategies = []
                                    metricAggregationStrategies = []
                                    ruleRepresentation = null
								}
							}
						}
					}
		
					component5:
					{
						instanceOf = "node"
						healthComponentType = "test1"
						profilerConfigurationName = "${resource.path}/profiler.conf"
						aggregationSchema:
						{
							p2:
							{
								test5:
								{
									instanceOf = "NameComponentType"
									metricTypes:
									{
										metricType1:
										{
											instanceOf = "Gauge"
										}
									}
									scopeAggregationStrategies = []
                                    metricAggregationStrategies = []
                                    ruleRepresentation = null
								}
							}
						}
					}
						
					component6:
					{
						instanceOf = "transaction"
						aggregationSchema:
						{
							p2:
							{
								test6:
								{
									instanceOf = "NameComponentType"
									metricTypes:
									{
										metricType1:
										{
											instanceOf = "Gauge"
										}
									}
									scopeAggregationStrategies = []
                                    metricAggregationStrategies = []
                                    ruleRepresentation = null
								}
							}
						}
					}
						
					component7:
					{
						instanceOf = "group"
					}
						
					component8:
					{
						instanceOf = "group"
						allowComponents = false
						allowGroups = false
						componentTypes = ["type1", "type2"]
						groupTypes = ["type3", "type4"]
						aggregationGroup = true
						availabilityCondition: { instanceOf = "TestGroupAvailabilityCondition"}
						healthComponentType = "availabilityType"
					}
				}
				
				groups:
				{
					group1:
					{
						groupType = "component8"
						groups:
						{
							group11:
							{
								groupType = "component7"
							}
						
							group12:
							{
								groupType = "component7"
							}
						}
						
						options:
						{
							key1 = "value1"
							key2 = "value2"
						}
						
						properties:
						{
							key3 = "value3"
							key4 = "value4"
						}
						
						tags = ["tag1", "tag2"]
						rules:
						{
							rule1:
							{
								instanceOf = "TestRule"
							}
						}
						groupRules:
						{
							rule2:
							{
								instanceOf = "TestRule"
							}
						}
						alerts:
						{
							alert2:
							{
								instanceOf = "ExpressionSimpleAlert"
								channels:
								[
									{
										instanceOf = "MailAlertChannel"
										name = "mail"
										onTemplate = "onTemplate"
										recipients:
										[
										 	{
										 		type = "address"
									 			name = "recipient1"
								 				address = "address1"
										 	}
										]
											
										onSubject = "onSubject"
									}
								]
								onCondition = "onCondition"
								offCondition = "offCondition"
							}
						}
						
						groupAlerts:
						{
							alert2:
							{
								instanceOf = "ExpressionSimpleAlert"
								channels:
								[
									{
										instanceOf = "MailAlertChannel"
										name = "mail"
										onTemplate = "onTemplate"
										recipients:
										[
										 	{
										 		type = "address"
									 			name = "recipient1"
								 				address = "address1"
										 	}
										]
											
										onSubject = "onSubject"
									}
								]
								onCondition = "onCondition"
								offCondition = "offCondition"
							}
						}
						
						jobs:
						{
							job1:
							{
								instanceOf = "OneTimeJob"
								operation:
								{
									instanceOf = "ExpressionComponentJobOperation"
									expression = "component.log('job1')"
								}
						
								schedule:
								{
									instanceOf = "StandardSchedule"
									expression = "time(10:30)"
									timeFormat = "HH:mm"
								}
							}
						}
					}
				
					group2:
					{
						groupType = "component8"
					}
				}
			}
		}
	}
}	