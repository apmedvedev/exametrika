{
	modules:
	{
		module1:
		{
			version = "1.0.0"
			schema:
			{
				instanceOf = "ComponentModel"
				version = 1
				periods:
				{
					p2:
					{
						period:
						{
							kind = "absolute"
							type = "minute"
							amount = 100
						}
						cyclePeriodCount = 100
					}
				}
				
				health:
				{
					firstAggregationPeriod = "p2"
				    totalCounter:{}
					upCounter:{}
					downCounter:{}
					failureCounter:{}
					maintenanceCounter:{}
				}
				
				components:
				{
					HealthComponent:
					{
						instanceOf = "agent"
						profilerConfigurationName = "${resource.path}/profiler.conf"
						healthComponentType = "HealthComponentType"
						aggregationSchema:
						{
							p2:
							{
								HealthComponentType:
								{
									instanceOf = "NameComponentType"
									metricTypes:
									{
								        totalCounter:
                                        {
                                            instanceOf = "Counter"
                                        }
										upCounter:
										{
											instanceOf = "Counter"
										}
									
										downCounter:
										{
											instanceOf = "Counter"
										}
											
										failureCounter:
										{
											instanceOf = "Counter"
										}
											
										maintenanceCounter:
										{
											instanceOf = "Counter"
										}
									}
								}
							}
						}
					}
				
					Host:
					{
						instanceOf = "host"
						healthComponentType = "HealthComponentType"
						profilerConfigurationName = "${resource.path}/profiler.conf"
						aggregationSchema:
						{
							p2:
							{
								host.cpu:
								{
									instanceOf = "NameComponentType"
									metricTypes:
									{
										metricType1:
										{
											instanceOf = "Gauge"
										}
									}
									
									componentDiscoveryStrategies = [ { instanceOf = "HostDiscoveryStrategy" component = "Host"} ]
									componentDeletionStrategy = { instanceOf = "HostDeletionStrategy"}
									componentBindingStrategies = [ { instanceOf = "TestComponentBindingStrategy" }]
									ruleRepresentation = "default"
								}
						
								host.mem:
								{
									instanceOf = "NameComponentType"
									metricTypes:
									{
										metricType1:
										{
											instanceOf = "Gauge"
										}
									}
									componentBindingStrategies = [ { instanceOf = "TestComponentBindingStrategy" }]
									ruleRepresentation = "default"
								}
							}
						}
						
						groupDiscoveryStrategies:
						[
						 	{
						 		instanceOf = "PatternGroupDiscoveryStrategy"
					 			pattern = "groups.group1.*"
				 				component = "Group1"
			 				    group = "groups"
						 	}
						 	
						 	{
						 		instanceOf = "PatternGroupDiscoveryStrategy"
					 			pattern = "groups.group2.*"
				 				component = "Group2"
			 				    group = "groups"
						 	}
						]
					}
					
					Group:
					{
						instanceOf = "group"
					}
						
					Group1:
					{
						instanceOf = "group"
						healthComponentType = "HealthComponentType"
						availabilityCondition:
						{
							instanceOf = "ExpressionGroupAvailabilityCondition"
							expression = "available > 0"
						}
						groupDiscoveryStrategies:
						[
						 	{
						 		instanceOf = "PatternGroupDiscoveryStrategy"
					 			pattern = "groups"
				 				component = "Group"
						 	}
						 	
						 	{
						 		instanceOf = "PatternGroupDiscoveryStrategy"
					 			pattern = "groups.group1*"
				 				component = "Group1"
			 				    group = "groups"
						 	}
						]
					}
				
					Group2:
					{
						instanceOf = "group"
						healthComponentType = "HealthComponentType"
						availabilityCondition:
						{
							instanceOf = "ExpressionGroupAvailabilityCondition"
							expression = "available > 0"
						}
						groupDiscoveryStrategies:
						[
						 	{
						 		instanceOf = "PatternGroupDiscoveryStrategy"
					 			pattern = "groups"
				 				component = "Group"
						 	}
						 	
						 	{
						 		instanceOf = "PatternGroupDiscoveryStrategy"
					 			pattern = "groups.group2*"
				 				component = "Group2"
			 				    group = "groups"
						 	}
						]
					}
				}
				
				groups:
				{
					groups:
					{
						groupType = "Group"
					}
				}
			}
		}
	}
}	