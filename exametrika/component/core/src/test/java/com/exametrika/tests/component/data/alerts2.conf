{
	modules:
	{
		module1:
		{
			version = "1.0.0"
			schema:
			{
				instanceOf = "ComponentModel"
				version = 1
				periods:
				{
					p1:
					{
						period:
						{
							kind = "absolute"
							type = "second"
							amount = 100
						}
						cyclePeriodCount = 1
						nonAggregating = true
					}
				
					p2:
					{
						period:
						{
							kind = "absolute"
							type = "minute"
							amount = 100
						}
						cyclePeriodCount = 100
					}
				}
				
				health:
				{
					firstAggregationPeriod = "p2"
				    totalCounter:{}
					upCounter:{}
					downCounter:{}
					failureCounter:{}
					maintenanceCounter:{}
				}
				
				components:
				{
					HealthComponent:
					{
						instanceOf = "agent"
						profilerConfigurationName = "${resource.path}/profiler.conf"
						healthComponentType = "HealthComponentType"
						aggregationSchema:
						{
							p2:
							{
								HealthComponentType:
								{
									instanceOf = "NameComponentType"
									metricTypes:
									{
									    totalCounter:
                                        {
                                            instanceOf = "Counter"
                                        }
										upCounter:
										{
											instanceOf = "Counter"
										}
									
										downCounter:
										{
											instanceOf = "Counter"
										}
											
										failureCounter:
										{
											instanceOf = "Counter"
										}
											
										maintenanceCounter:
										{
											instanceOf = "Counter"
										}
									}
								}
							}
						}
					}
		
					Host:
					{
						instanceOf = "host"
						healthComponentType = "HealthComponentType"
						profilerConfigurationName = "${resource.path}/profiler.conf"
						aggregationSchema:
						{
							p1:
							{
								host.cpu:
								{
									instanceOf = "NameComponentType"
									hasLog = true
									metricTypes:
									{
										metricType1:
										{
											instanceOf = "Gauge"
										}
									}
									
									componentBindingStrategies = [ { instanceOf = "TestComponentBindingStrategy" }]
									ruleRepresentation = "default"
								}
							}
						
							p2:
							{
								host.cpu:
								{
									instanceOf = "NameComponentType"
									metricTypes:
									{
										metricType1:
										{
											instanceOf = "Gauge"
										}
									}
									
									componentDiscoveryStrategies = [ { instanceOf = "HostDiscoveryStrategy" component = "Host"} ]
									componentDeletionStrategy = { instanceOf = "HostDeletionStrategy"}
									componentBindingStrategies = [ { instanceOf = "TestComponentBindingStrategy" }]
									ruleRepresentation = "default"
								}
						
								host.mem:
								{
									instanceOf = "NameComponentType"
									metricTypes:
									{
										metricType1:
										{
											instanceOf = "Gauge"
										}
									}
									componentBindingStrategies = [ { instanceOf = "TestComponentBindingStrategy" }]
									ruleRepresentation = "default"
								}
							}
						}
						
						alerts:
						{
							health:
							{
								instanceOf = "HealthAlert"
								channels:
								[
									{
										instanceOf = "MailAlertChannel"
										name = "mail"
										onTemplate = "Component <%component.scope%> is unhealthy."
										offTemplate = "Component <%component.scope%> is healthy."
										schedule:
										{
											instanceOf = "StandardSchedule"
											expression = "time(00:00..23:59)"
											timeFormat = "HH:mm"
										}
											
										period:
										{
											instanceOf = "StandardSchedulePeriod"
											type = "second"
											kind = "absolute"
											amount = 1
										}
										
										recipients:
										[
										 	{
										 		type = "address"
									 			name = "recipient1"
								 				address = "address1"
										 	}
										]
											
										onSubject = "Health alert is on."
										offSubject = "Health alert is off."
										formatted = false
										senderName = "AlertService"
										senderAddress = "exametrika@gmail.com"
									}
								]
								
								tags = ["tag1", "tag2"]
							}
						}
					}
					
					AggregationGroup:
					{
						instanceOf = "group"
					}
				}
			}
		}
	}
}	