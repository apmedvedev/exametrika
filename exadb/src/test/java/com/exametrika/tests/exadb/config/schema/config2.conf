{	
	initialSchema:
	{
		name = "testDb"
		alias = "testDbAlias"
		description = "testDbDescription"
		locale = "locale"
		timeZone = "timeZone"
		modules:
		{
			module1:
			{
				alias = "alias"
				description = "description"
				version:
				{
					major = 1
					minor = 2
					patch = 3
					preRelease = "pre"
					buildMetadata = "build"
				}
				schema:
				{
					instanceOf = "Database"
					domains:
					{
						domain1:
						{
							spaces:
							{
								space1:
								{
									instanceOf = "ObjectSpace"
									pathIndex = 1
									fullTextPathIndex = 2
									rootNode = "root"
									nodes:
									{
										root:
										{
											instanceOf = "TestNode"
										}
										
										node:
										{
											instanceOf = "TestNode"
											fields:
											{
												field1:
												{
													instanceOf = "BodyField"
													compressed = false
												}
												
												field2:
												{
													instanceOf = "ComputedField"
													expression = "a+b"
												}
												
												field3:
												{
													instanceOf = "FileField"
													pathIndex = 1
													maxFileSize = 2
													directory = "dir"
													pageType = "large"
													preload = true
													properties:
													{
														key1 = "value1"
														key2 = "value2"
													}
												}
												
												field4:
												{
													instanceOf = "BlobStoreField"
												}
												
												field5:
												{
													instanceOf = "JsonField"
													schema = "schema"
													typeName = "type"
													required = true
													compressed = false
												}
												
												field6:
												{
													instanceOf = "SerializableField"
													required = true
													compressed = false
													allowedClasses = ["class1", "class2"]
												}
												
												field7:
												{
													instanceOf = "StringField"
													required = true
													compressed = false
													minSize = 1
													maxSize = 2
													pattern = "pattern"
													sequenceField = "sequence"
													enumeration = ["value1", "value2"]
												}
												
												field8:
												{
													instanceOf = "PrimitiveField"
													dataType = "boolean"
												}
												
												field9:
												{
													instanceOf = "NumericField"
													dataType = "long"
													min = 100
													max = 1000
													enumeration = [200, 300]
													sequenceField = "sequence"
												}
												
												field10:
												{
													instanceOf = "NumericSequenceField"
													initialValue = 100
													step = 10
												}
												
												field11:
												{
													instanceOf = "StringSequenceField"
													initialValue = 100
													step = 10
													prefix = "pre"
													suffix = "su"
													numberFormat = "format"
												}
												
												field12:
												{
													instanceOf = "VersionField"
												}
												
												field13:
												{
													instanceOf = "UuidField"
												}
												
												field14:
												{
													instanceOf = "SingleReferenceField"
													fieldReference = "ref"
													required = true
													owning = true
													bidirectional = true
												}
												
												field15:
												{
													instanceOf = "SingleReferenceField"
													nodeReferences = ["ref1", "ref2"]
												}
												
												field16:
												{
													instanceOf = "ReferenceField"
													fieldReference = "ref"
													required = true
													owning = true
													bidirectional = true
												}
												
												field17:
												{
													instanceOf = "ReferenceField"
													nodeReferences = ["ref1", "ref2"]
												}
												
												field18:
												{
													instanceOf = "BinaryField"
													required = true
													compressed = false
													blobStoreNode = "node"
													blobStoreField = "field"
												}
												
												field19:
												{
													instanceOf = "TextField"
													required = true
													compressed = false
													blobStoreNode = "node"
													blobStoreField = "field"
												}
												
												field20:
												{
													instanceOf = "IndexedNumericField"
													dataType = "long"
													min = 100
													max = 1000
													enumeration = [200, 300]
													sequenceField = "sequence"
													pathIndex = 1
													indexType = "tree"
													primary = false
													unique = false
													sorted = true
													ascending = false
													cached = false
													fullText = true
												}
												
												field21:
												{
													instanceOf = "IndexedUuidField"
													required = true
													pathIndex = 1
													indexType = "tree"
													primary = false
													unique = false
													cached = false
												}
												
												field22:
												{
													instanceOf = "IndexedStringField"
													required = true
													compressed = false
													minSize = 1
													maxSize = 2
													pattern = "pattern"
													sequenceField = "sequence"
													enumeration = ["value1", "value2"]
													pathIndex = 1
													indexType = "tree"
													primary = false
													unique = false
													sorted = true
													ascending = false
													cached = false
													fullText = true
													tokenized = true
													collator:
													{
														locale = "ru_RU"
														strength = "tertiary"
													}
												}
												
												field23:
												{
													instanceOf = "IndexField"
													index:
													{
														instanceOf = "BTreeIndex"
														name = "index1"
														pathIndex = 1
														properties:
														{
															key = "value"
														}
														fixedKey = false
														maxKeySize = 100
														fixedValue = false
														maxValueSize = 100
														keyNormalizer:
														{
															instanceOf = "ByteArrayKeyNormalizer"
														}
														
														valueConverter:
														{
															instanceOf = "ByteArrayValueConverter"
														}
														
														unique = true
													}
												}
												
												field24:
												{
													instanceOf = "IndexField"
													index:
													{
														instanceOf = "TreeIndex"
														name = "index2"
														pathIndex = 1
														properties:
														{
															key = "value"
														}
														fixedKey = false
														maxKeySize = 100
														fixedValue = false
														maxValueSize = 100
														keyNormalizer:
														{
															instanceOf = "CollatorKeyNormalizer"
															locale = "ru_RU"
															strength = "secondary"
														}
														
														valueConverter:
														{
															instanceOf = "LongValueConverter"
														}
														
														unique = true
													}
												}
												
												field25:
												{
													instanceOf = "IndexField"
													index:
													{
														instanceOf = "HashIndex"
														name = "index3"
														pathIndex = 1
														properties:
														{
															key = "value"
														}
														fixedKey = false
														maxKeySize = 100
														fixedValue = false
														maxValueSize = 100
														keyNormalizer:
														{
															instanceOf = "CompositeKeyNormalizer"
															keyNormalizers:
															[
																{
																	instanceOf = "FixedStringKeyNormalizer"
																}
																
																{
																	instanceOf = "StringKeyNormalizer"
																}
																
																{
																	instanceOf = "UuidKeyNormalizer"
																}
																
																{
																	instanceOf = "DescendingKeyNormalizer"
																	keyNormalizer:
																	{
																		instanceOf = "NumericKeyNormalizer"
																		dataType = "long"
																	}
																}
																
															]
														}
														
														valueConverter:
														{
															instanceOf = "LongValueConverter"
														}
													}
												}
												
												field26:
												{
													instanceOf = "StructuredBlobField"
													required = true
													compressed = false
													blobStoreNode = "node"
													blobStoreField = "field"
													allowedClasses = ["class1", "class2"]
													fullTextIndex = true
													recordIndexer:
													{
														instanceOf = "TestRecordIndexer"
													}
													indexes:
													{
														first:
														{
															indexType = "tree"
															pathIndex = 1
															fixedKey = false
															maxKeySize = 256
															keyNormalizer:
															{
																instanceOf = "StringKeyNormalizer"
															}
															unique = false
															sorted = true
														}
														
														second:
														{
															fixedKey = true
															maxKeySize = 16
															keyNormalizer:
															{
																instanceOf = "UuidKeyNormalizer"
															}
														}
													}
												}
												field27:
												{
													instanceOf = "TagField"
													maxSize = 256
													indexType = "btree"
													pathIndex = 1
													indexName = "shared"
												}
											}
										}
									}
								}
							}
							
							domainServices:
							[
								{
									instanceOf = "TestDomainService"
								}
							]
						}
					}
					
					extensions:
					[
					]
				}
				
				dependencies:
				{
					module2:
					{
						version:
						{
							major = 2
							minor = 3
						}
					}
					
					module3:
					{
						version = "3.4"
					}
				}
			}
			
			module2:
			{
				version = "2.4+build"
				schema:
				{
					instanceOf = "Database"
				}
			}
			
			module3:
			{
				version = "3.5-pre"
				schema:
				{
					instanceOf = "Database"
				}
			}
		}
	}
}